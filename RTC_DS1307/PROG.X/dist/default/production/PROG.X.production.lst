

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Tue Sep 03 21:20:02 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2
    31                           	psect	text21,local,class=CODE,merge=1,delta=2
    32                           	psect	text22,local,class=CODE,merge=1,delta=2
    33                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    36                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    37                           	dabs	1,0x7E,2
    38     0000                     
    39                           ; Version 2.40
    40                           ; Generated 17/11/2021 GMT
    41                           ; 
    42                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution. Publication is not required when
    56                           ;        this file is used in an embedded application.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16F877A Definitions
    72                           ; 
    73                           ; SFR Addresses
    74     0000                     	;# 
    75     0001                     	;# 
    76     0002                     	;# 
    77     0003                     	;# 
    78     0004                     	;# 
    79     0005                     	;# 
    80     0006                     	;# 
    81     0007                     	;# 
    82     0008                     	;# 
    83     0009                     	;# 
    84     000A                     	;# 
    85     000B                     	;# 
    86     000C                     	;# 
    87     000D                     	;# 
    88     000E                     	;# 
    89     000E                     	;# 
    90     000F                     	;# 
    91     0010                     	;# 
    92     0011                     	;# 
    93     0012                     	;# 
    94     0013                     	;# 
    95     0014                     	;# 
    96     0015                     	;# 
    97     0015                     	;# 
    98     0016                     	;# 
    99     0017                     	;# 
   100     0018                     	;# 
   101     0019                     	;# 
   102     001A                     	;# 
   103     001B                     	;# 
   104     001B                     	;# 
   105     001C                     	;# 
   106     001D                     	;# 
   107     001E                     	;# 
   108     001F                     	;# 
   109     0081                     	;# 
   110     0085                     	;# 
   111     0086                     	;# 
   112     0087                     	;# 
   113     0088                     	;# 
   114     0089                     	;# 
   115     008C                     	;# 
   116     008D                     	;# 
   117     008E                     	;# 
   118     0091                     	;# 
   119     0092                     	;# 
   120     0093                     	;# 
   121     0094                     	;# 
   122     0098                     	;# 
   123     0099                     	;# 
   124     009C                     	;# 
   125     009D                     	;# 
   126     009E                     	;# 
   127     009F                     	;# 
   128     010C                     	;# 
   129     010D                     	;# 
   130     010E                     	;# 
   131     010F                     	;# 
   132     018C                     	;# 
   133     018D                     	;# 
   134     0000                     	;# 
   135     0001                     	;# 
   136     0002                     	;# 
   137     0003                     	;# 
   138     0004                     	;# 
   139     0005                     	;# 
   140     0006                     	;# 
   141     0007                     	;# 
   142     0008                     	;# 
   143     0009                     	;# 
   144     000A                     	;# 
   145     000B                     	;# 
   146     000C                     	;# 
   147     000D                     	;# 
   148     000E                     	;# 
   149     000E                     	;# 
   150     000F                     	;# 
   151     0010                     	;# 
   152     0011                     	;# 
   153     0012                     	;# 
   154     0013                     	;# 
   155     0014                     	;# 
   156     0015                     	;# 
   157     0015                     	;# 
   158     0016                     	;# 
   159     0017                     	;# 
   160     0018                     	;# 
   161     0019                     	;# 
   162     001A                     	;# 
   163     001B                     	;# 
   164     001B                     	;# 
   165     001C                     	;# 
   166     001D                     	;# 
   167     001E                     	;# 
   168     001F                     	;# 
   169     0081                     	;# 
   170     0085                     	;# 
   171     0086                     	;# 
   172     0087                     	;# 
   173     0088                     	;# 
   174     0089                     	;# 
   175     008C                     	;# 
   176     008D                     	;# 
   177     008E                     	;# 
   178     0091                     	;# 
   179     0092                     	;# 
   180     0093                     	;# 
   181     0094                     	;# 
   182     0098                     	;# 
   183     0099                     	;# 
   184     009C                     	;# 
   185     009D                     	;# 
   186     009E                     	;# 
   187     009F                     	;# 
   188     010C                     	;# 
   189     010D                     	;# 
   190     010E                     	;# 
   191     010F                     	;# 
   192     018C                     	;# 
   193     018D                     	;# 
   194     0000                     	;# 
   195     0001                     	;# 
   196     0002                     	;# 
   197     0003                     	;# 
   198     0004                     	;# 
   199     0005                     	;# 
   200     0006                     	;# 
   201     0007                     	;# 
   202     0008                     	;# 
   203     0009                     	;# 
   204     000A                     	;# 
   205     000B                     	;# 
   206     000C                     	;# 
   207     000D                     	;# 
   208     000E                     	;# 
   209     000E                     	;# 
   210     000F                     	;# 
   211     0010                     	;# 
   212     0011                     	;# 
   213     0012                     	;# 
   214     0013                     	;# 
   215     0014                     	;# 
   216     0015                     	;# 
   217     0015                     	;# 
   218     0016                     	;# 
   219     0017                     	;# 
   220     0018                     	;# 
   221     0019                     	;# 
   222     001A                     	;# 
   223     001B                     	;# 
   224     001B                     	;# 
   225     001C                     	;# 
   226     001D                     	;# 
   227     001E                     	;# 
   228     001F                     	;# 
   229     0081                     	;# 
   230     0085                     	;# 
   231     0086                     	;# 
   232     0087                     	;# 
   233     0088                     	;# 
   234     0089                     	;# 
   235     008C                     	;# 
   236     008D                     	;# 
   237     008E                     	;# 
   238     0091                     	;# 
   239     0092                     	;# 
   240     0093                     	;# 
   241     0094                     	;# 
   242     0098                     	;# 
   243     0099                     	;# 
   244     009C                     	;# 
   245     009D                     	;# 
   246     009E                     	;# 
   247     009F                     	;# 
   248     010C                     	;# 
   249     010D                     	;# 
   250     010E                     	;# 
   251     010F                     	;# 
   252     018C                     	;# 
   253     018D                     	;# 
   254     0000                     	;# 
   255     0001                     	;# 
   256     0002                     	;# 
   257     0003                     	;# 
   258     0004                     	;# 
   259     0005                     	;# 
   260     0006                     	;# 
   261     0007                     	;# 
   262     0008                     	;# 
   263     0009                     	;# 
   264     000A                     	;# 
   265     000B                     	;# 
   266     000C                     	;# 
   267     000D                     	;# 
   268     000E                     	;# 
   269     000E                     	;# 
   270     000F                     	;# 
   271     0010                     	;# 
   272     0011                     	;# 
   273     0012                     	;# 
   274     0013                     	;# 
   275     0014                     	;# 
   276     0015                     	;# 
   277     0015                     	;# 
   278     0016                     	;# 
   279     0017                     	;# 
   280     0018                     	;# 
   281     0019                     	;# 
   282     001A                     	;# 
   283     001B                     	;# 
   284     001B                     	;# 
   285     001C                     	;# 
   286     001D                     	;# 
   287     001E                     	;# 
   288     001F                     	;# 
   289     0081                     	;# 
   290     0085                     	;# 
   291     0086                     	;# 
   292     0087                     	;# 
   293     0088                     	;# 
   294     0089                     	;# 
   295     008C                     	;# 
   296     008D                     	;# 
   297     008E                     	;# 
   298     0091                     	;# 
   299     0092                     	;# 
   300     0093                     	;# 
   301     0094                     	;# 
   302     0098                     	;# 
   303     0099                     	;# 
   304     009C                     	;# 
   305     009D                     	;# 
   306     009E                     	;# 
   307     009F                     	;# 
   308     010C                     	;# 
   309     010D                     	;# 
   310     010E                     	;# 
   311     010F                     	;# 
   312     018C                     	;# 
   313     018D                     	;# 
   314     0000                     	;# 
   315     0001                     	;# 
   316     0002                     	;# 
   317     0003                     	;# 
   318     0004                     	;# 
   319     0005                     	;# 
   320     0006                     	;# 
   321     0007                     	;# 
   322     0008                     	;# 
   323     0009                     	;# 
   324     000A                     	;# 
   325     000B                     	;# 
   326     000C                     	;# 
   327     000D                     	;# 
   328     000E                     	;# 
   329     000E                     	;# 
   330     000F                     	;# 
   331     0010                     	;# 
   332     0011                     	;# 
   333     0012                     	;# 
   334     0013                     	;# 
   335     0014                     	;# 
   336     0015                     	;# 
   337     0015                     	;# 
   338     0016                     	;# 
   339     0017                     	;# 
   340     0018                     	;# 
   341     0019                     	;# 
   342     001A                     	;# 
   343     001B                     	;# 
   344     001B                     	;# 
   345     001C                     	;# 
   346     001D                     	;# 
   347     001E                     	;# 
   348     001F                     	;# 
   349     0081                     	;# 
   350     0085                     	;# 
   351     0086                     	;# 
   352     0087                     	;# 
   353     0088                     	;# 
   354     0089                     	;# 
   355     008C                     	;# 
   356     008D                     	;# 
   357     008E                     	;# 
   358     0091                     	;# 
   359     0092                     	;# 
   360     0093                     	;# 
   361     0094                     	;# 
   362     0098                     	;# 
   363     0099                     	;# 
   364     009C                     	;# 
   365     009D                     	;# 
   366     009E                     	;# 
   367     009F                     	;# 
   368     010C                     	;# 
   369     010D                     	;# 
   370     010E                     	;# 
   371     010F                     	;# 
   372     018C                     	;# 
   373     018D                     	;# 
   374     0000                     	;# 
   375     0001                     	;# 
   376     0002                     	;# 
   377     0003                     	;# 
   378     0004                     	;# 
   379     0005                     	;# 
   380     0006                     	;# 
   381     0007                     	;# 
   382     0008                     	;# 
   383     0009                     	;# 
   384     000A                     	;# 
   385     000B                     	;# 
   386     000C                     	;# 
   387     000D                     	;# 
   388     000E                     	;# 
   389     000E                     	;# 
   390     000F                     	;# 
   391     0010                     	;# 
   392     0011                     	;# 
   393     0012                     	;# 
   394     0013                     	;# 
   395     0014                     	;# 
   396     0015                     	;# 
   397     0015                     	;# 
   398     0016                     	;# 
   399     0017                     	;# 
   400     0018                     	;# 
   401     0019                     	;# 
   402     001A                     	;# 
   403     001B                     	;# 
   404     001B                     	;# 
   405     001C                     	;# 
   406     001D                     	;# 
   407     001E                     	;# 
   408     001F                     	;# 
   409     0081                     	;# 
   410     0085                     	;# 
   411     0086                     	;# 
   412     0087                     	;# 
   413     0088                     	;# 
   414     0089                     	;# 
   415     008C                     	;# 
   416     008D                     	;# 
   417     008E                     	;# 
   418     0091                     	;# 
   419     0092                     	;# 
   420     0093                     	;# 
   421     0094                     	;# 
   422     0098                     	;# 
   423     0099                     	;# 
   424     009C                     	;# 
   425     009D                     	;# 
   426     009E                     	;# 
   427     009F                     	;# 
   428     010C                     	;# 
   429     010D                     	;# 
   430     010E                     	;# 
   431     010F                     	;# 
   432     018C                     	;# 
   433     018D                     	;# 
   434     001A                     _RCREG	set	26
   435     0019                     _TXREG	set	25
   436     0018                     _RCSTAbits	set	24
   437     0007                     _PORTCbits	set	7
   438     0013                     _SSPBUF	set	19
   439     0014                     _SSPCON	set	20
   440     0065                     _RCIF	set	101
   441     009C                     _CMCON	set	156
   442     0098                     _TXSTAbits	set	152
   443     0099                     _SPBRG	set	153
   444     0091                     _SSPCON2bits	set	145
   445     0094                     _SSPSTATbits	set	148
   446     0094                     _SSPSTAT	set	148
   447     0093                     _SSPADD	set	147
   448     0091                     _SSPCON2	set	145
   449     0087                     _TRISCbits	set	135
   450     04C1                     _TRMT	set	1217
   451                           
   452                           	psect	strings
   453     0003                     __pstrings:
   454     0003                     stringtab:
   455     0003                     __stringtab:
   456                           
   457                           ;	String table - string pointers are 2 bytes each
   458     0003  1BFF               	btfsc	btemp+1,7
   459     0004  280D               	ljmp	stringcode
   460     0005  1383               	bcf	3,7
   461     0006  187F               	btfsc	btemp+1,0
   462     0007  1783               	bsf	3,7
   463     0008  0800               	movf	0,w
   464     0009  0A84               	incf	4,f
   465     000A  1903               	skipnz
   466     000B  0AFF               	incf	btemp+1,f
   467     000C  0008               	return
   468     000D                     stringcode:
   469     000D  087F               	movf	btemp+1,w
   470     000E  397F               	andlw	127
   471     000F  008A               	movwf	10
   472     0010  0804               	movf	4,w
   473     0011  0A84               	incf	4,f
   474     0012  1903               	skipnz
   475     0013  0AFF               	incf	btemp+1,f
   476     0014  0082               	movwf	2
   477     0015                     __stringbase:
   478     0015                     __end_of__stringtab:
   479                           
   480                           	psect	stringtext
   481     0800                     __pstringtext:
   482     0800                     STR_11:
   483     0800  3444               	retlw	68	;'D'
   484     0801  3469               	retlw	105	;'i'
   485     0802  3467               	retlw	103	;'g'
   486     0803  3469               	retlw	105	;'i'
   487     0804  3474               	retlw	116	;'t'
   488     0805  3465               	retlw	101	;'e'
   489     0806  3420               	retlw	32	;' '
   490     0807  346F               	retlw	111	;'o'
   491     0808  3420               	retlw	32	;' '
   492     0809  346E               	retlw	110	;'n'
   493     080A  3475               	retlw	117	;'u'
   494     080B  346D               	retlw	109	;'m'
   495     080C  3465               	retlw	101	;'e'
   496     080D  3472               	retlw	114	;'r'
   497     080E  346F               	retlw	111	;'o'
   498     080F  3420               	retlw	32	;' '
   499     0810  3463               	retlw	99	;'c'
   500     0811  346F               	retlw	111	;'o'
   501     0812  3472               	retlw	114	;'r'
   502     0813  3472               	retlw	114	;'r'
   503     0814  3465               	retlw	101	;'e'
   504     0815  3473               	retlw	115	;'s'
   505     0816  3470               	retlw	112	;'p'
   506     0817  346F               	retlw	111	;'o'
   507     0818  346E               	retlw	110	;'n'
   508     0819  3464               	retlw	100	;'d'
   509     081A  3465               	retlw	101	;'e'
   510     081B  346E               	retlw	110	;'n'
   511     081C  3474               	retlw	116	;'t'
   512     081D  3465               	retlw	101	;'e'
   513     081E  3420               	retlw	32	;' '
   514     081F  3461               	retlw	97	;'a'
   515     0820  346F               	retlw	111	;'o'
   516     0821  3420               	retlw	32	;' '
   517     0822  3464               	retlw	100	;'d'
   518     0823  3469               	retlw	105	;'i'
   519     0824  3461               	retlw	97	;'a'
   520     0825  3420               	retlw	32	;' '
   521     0826  3464               	retlw	100	;'d'
   522     0827  3461               	retlw	97	;'a'
   523     0828  3420               	retlw	32	;' '
   524     0829  3473               	retlw	115	;'s'
   525     082A  3465               	retlw	101	;'e'
   526     082B  346D               	retlw	109	;'m'
   527     082C  3461               	retlw	97	;'a'
   528     082D  346E               	retlw	110	;'n'
   529     082E  3461               	retlw	97	;'a'
   530     082F  343A               	retlw	58	;':'
   531     0830  3420               	retlw	32	;' '
   532     0831  3400               	retlw	0
   533     0832                     STR_21:
   534     0832  3444               	retlw	68	;'D'
   535     0833  3469               	retlw	105	;'i'
   536     0834  3467               	retlw	103	;'g'
   537     0835  3469               	retlw	105	;'i'
   538     0836  3474               	retlw	116	;'t'
   539     0837  3465               	retlw	101	;'e'
   540     0838  3420               	retlw	32	;' '
   541     0839  346F               	retlw	111	;'o'
   542     083A  3473               	retlw	115	;'s'
   543     083B  3420               	retlw	32	;' '
   544     083C  3473               	retlw	115	;'s'
   545     083D  3465               	retlw	101	;'e'
   546     083E  3467               	retlw	103	;'g'
   547     083F  3475               	retlw	117	;'u'
   548     0840  346E               	retlw	110	;'n'
   549     0841  3464               	retlw	100	;'d'
   550     0842  346F               	retlw	111	;'o'
   551     0843  3473               	retlw	115	;'s'
   552     0844  343A               	retlw	58	;':'
   553     0845  3420               	retlw	32	;' '
   554     0846  3400               	retlw	0
   555     0847                     STR_20:
   556     0847  3444               	retlw	68	;'D'
   557     0848  3469               	retlw	105	;'i'
   558     0849  3467               	retlw	103	;'g'
   559     084A  3469               	retlw	105	;'i'
   560     084B  3474               	retlw	116	;'t'
   561     084C  3465               	retlw	101	;'e'
   562     084D  3420               	retlw	32	;' '
   563     084E  346F               	retlw	111	;'o'
   564     084F  3473               	retlw	115	;'s'
   565     0850  3420               	retlw	32	;' '
   566     0851  346D               	retlw	109	;'m'
   567     0852  3469               	retlw	105	;'i'
   568     0853  346E               	retlw	110	;'n'
   569     0854  3475               	retlw	117	;'u'
   570     0855  3474               	retlw	116	;'t'
   571     0856  346F               	retlw	111	;'o'
   572     0857  3473               	retlw	115	;'s'
   573     0858  343A               	retlw	58	;':'
   574     0859  3420               	retlw	32	;' '
   575     085A  3400               	retlw	0
   576     085B                     STR_22:
   577     085B  3452               	retlw	82	;'R'
   578     085C  3465               	retlw	101	;'e'
   579     085D  346C               	retlw	108	;'l'
   580     085E  346F               	retlw	111	;'o'
   581     085F  3467               	retlw	103	;'g'
   582     0860  3469               	retlw	105	;'i'
   583     0861  346F               	retlw	111	;'o'
   584     0862  3420               	retlw	32	;' '
   585     0863  3463               	retlw	99	;'c'
   586     0864  346F               	retlw	111	;'o'
   587     0865  346E               	retlw	110	;'n'
   588     0866  3466               	retlw	102	;'f'
   589     0867  3469               	retlw	105	;'i'
   590     0868  3467               	retlw	103	;'g'
   591     0869  3475               	retlw	117	;'u'
   592     086A  3472               	retlw	114	;'r'
   593     086B  3461               	retlw	97	;'a'
   594     086C  3464               	retlw	100	;'d'
   595     086D  346F               	retlw	111	;'o'
   596     086E  3400               	retlw	0
   597     086F                     STR_13:
   598     086F  3432               	retlw	50	;'2'
   599     0870  3420               	retlw	32	;' '
   600     0871  342D               	retlw	45	;'-'
   601     0872  3420               	retlw	32	;' '
   602     0873  3453               	retlw	83	;'S'
   603     0874  3465               	retlw	101	;'e'
   604     0875  3467               	retlw	103	;'g'
   605     0876  3475               	retlw	117	;'u'
   606     0877  346E               	retlw	110	;'n'
   607     0878  3464               	retlw	100	;'d'
   608     0879  3461               	retlw	97	;'a'
   609     087A  3420               	retlw	32	;' '
   610     087B  3446               	retlw	70	;'F'
   611     087C  3465               	retlw	101	;'e'
   612     087D  3469               	retlw	105	;'i'
   613     087E  3472               	retlw	114	;'r'
   614     087F  3461               	retlw	97	;'a'
   615     0880  3420               	retlw	32	;' '
   616     0881  3400               	retlw	0
   617     0882                     STR_16:
   618     0882  3435               	retlw	53	;'5'
   619     0883  3420               	retlw	32	;' '
   620     0884  342D               	retlw	45	;'-'
   621     0885  3420               	retlw	32	;' '
   622     0886  3451               	retlw	81	;'Q'
   623     0887  3475               	retlw	117	;'u'
   624     0888  3469               	retlw	105	;'i'
   625     0889  346E               	retlw	110	;'n'
   626     088A  3474               	retlw	116	;'t'
   627     088B  3461               	retlw	97	;'a'
   628     088C  3420               	retlw	32	;' '
   629     088D  3446               	retlw	70	;'F'
   630     088E  3465               	retlw	101	;'e'
   631     088F  3469               	retlw	105	;'i'
   632     0890  3472               	retlw	114	;'r'
   633     0891  3461               	retlw	97	;'a'
   634     0892  3420               	retlw	32	;' '
   635     0893  3400               	retlw	0
   636     0894                     STR_15:
   637     0894  3434               	retlw	52	;'4'
   638     0895  3420               	retlw	32	;' '
   639     0896  342D               	retlw	45	;'-'
   640     0897  3420               	retlw	32	;' '
   641     0898  3451               	retlw	81	;'Q'
   642     0899  3475               	retlw	117	;'u'
   643     089A  3461               	retlw	97	;'a'
   644     089B  3472               	retlw	114	;'r'
   645     089C  3474               	retlw	116	;'t'
   646     089D  3461               	retlw	97	;'a'
   647     089E  3420               	retlw	32	;' '
   648     089F  3446               	retlw	70	;'F'
   649     08A0  3465               	retlw	101	;'e'
   650     08A1  3469               	retlw	105	;'i'
   651     08A2  3472               	retlw	114	;'r'
   652     08A3  3461               	retlw	97	;'a'
   653     08A4  3420               	retlw	32	;' '
   654     08A5  3400               	retlw	0
   655     08A6                     STR_14:
   656     08A6  3433               	retlw	51	;'3'
   657     08A7  3420               	retlw	32	;' '
   658     08A8  342D               	retlw	45	;'-'
   659     08A9  3420               	retlw	32	;' '
   660     08AA  3454               	retlw	84	;'T'
   661     08AB  3465               	retlw	101	;'e'
   662     08AC  3472               	retlw	114	;'r'
   663     08AD  3463               	retlw	99	;'c'
   664     08AE  3461               	retlw	97	;'a'
   665     08AF  3420               	retlw	32	;' '
   666     08B0  3446               	retlw	70	;'F'
   667     08B1  3465               	retlw	101	;'e'
   668     08B2  3469               	retlw	105	;'i'
   669     08B3  3472               	retlw	114	;'r'
   670     08B4  3461               	retlw	97	;'a'
   671     08B5  3420               	retlw	32	;' '
   672     08B6  3400               	retlw	0
   673     08B7                     STR_17:
   674     08B7  3436               	retlw	54	;'6'
   675     08B8  3420               	retlw	32	;' '
   676     08B9  342D               	retlw	45	;'-'
   677     08BA  3420               	retlw	32	;' '
   678     08BB  3453               	retlw	83	;'S'
   679     08BC  3465               	retlw	101	;'e'
   680     08BD  3478               	retlw	120	;'x'
   681     08BE  3474               	retlw	116	;'t'
   682     08BF  3461               	retlw	97	;'a'
   683     08C0  3420               	retlw	32	;' '
   684     08C1  3446               	retlw	70	;'F'
   685     08C2  3465               	retlw	101	;'e'
   686     08C3  3469               	retlw	105	;'i'
   687     08C4  3472               	retlw	114	;'r'
   688     08C5  3461               	retlw	97	;'a'
   689     08C6  3420               	retlw	32	;' '
   690     08C7  3400               	retlw	0
   691     08C8                     STR_19:
   692     08C8  3444               	retlw	68	;'D'
   693     08C9  3469               	retlw	105	;'i'
   694     08CA  3467               	retlw	103	;'g'
   695     08CB  3469               	retlw	105	;'i'
   696     08CC  3474               	retlw	116	;'t'
   697     08CD  3465               	retlw	101	;'e'
   698     08CE  3420               	retlw	32	;' '
   699     08CF  3461               	retlw	97	;'a'
   700     08D0  3420               	retlw	32	;' '
   701     08D1  3448               	retlw	72	;'H'
   702     08D2  346F               	retlw	111	;'o'
   703     08D3  3472               	retlw	114	;'r'
   704     08D4  3461               	retlw	97	;'a'
   705     08D5  343A               	retlw	58	;':'
   706     08D6  3420               	retlw	32	;' '
   707     08D7  3400               	retlw	0
   708     08D8                     STR_8:
   709     08D8  3444               	retlw	68	;'D'
   710     08D9  3469               	retlw	105	;'i'
   711     08DA  3467               	retlw	103	;'g'
   712     08DB  3469               	retlw	105	;'i'
   713     08DC  3474               	retlw	116	;'t'
   714     08DD  3465               	retlw	101	;'e'
   715     08DE  3420               	retlw	32	;' '
   716     08DF  346F               	retlw	111	;'o'
   717     08E0  3420               	retlw	32	;' '
   718     08E1  3464               	retlw	100	;'d'
   719     08E2  3469               	retlw	105	;'i'
   720     08E3  3461               	retlw	97	;'a'
   721     08E4  343A               	retlw	58	;':'
   722     08E5  3420               	retlw	32	;' '
   723     08E6  3400               	retlw	0
   724     08E7                     STR_10:
   725     08E7  3444               	retlw	68	;'D'
   726     08E8  3469               	retlw	105	;'i'
   727     08E9  3467               	retlw	103	;'g'
   728     08EA  3469               	retlw	105	;'i'
   729     08EB  3474               	retlw	116	;'t'
   730     08EC  3465               	retlw	101	;'e'
   731     08ED  3420               	retlw	32	;' '
   732     08EE  346F               	retlw	111	;'o'
   733     08EF  3420               	retlw	32	;' '
   734     08F0  3461               	retlw	97	;'a'
   735     08F1  346E               	retlw	110	;'n'
   736     08F2  346F               	retlw	111	;'o'
   737     08F3  343A               	retlw	58	;':'
   738     08F4  3420               	retlw	32	;' '
   739     08F5  3400               	retlw	0
   740     08F6                     STR_9:
   741     08F6  3444               	retlw	68	;'D'
   742     08F7  3469               	retlw	105	;'i'
   743     08F8  3467               	retlw	103	;'g'
   744     08F9  3469               	retlw	105	;'i'
   745     08FA  3474               	retlw	116	;'t'
   746     08FB  3465               	retlw	101	;'e'
   747     08FC  3420               	retlw	32	;' '
   748     08FD  346F               	retlw	111	;'o'
   749     08FE  3420               	retlw	32	;' '
   750     08FF  346D               	retlw	109	;'m'
   751     0900  3465               	retlw	101	;'e'
   752     0901  3473               	retlw	115	;'s'
   753     0902  343A               	retlw	58	;':'
   754     0903  3420               	retlw	32	;' '
   755     0904  3400               	retlw	0
   756     0905                     STR_18:
   757     0905  3437               	retlw	55	;'7'
   758     0906  3420               	retlw	32	;' '
   759     0907  342D               	retlw	45	;'-'
   760     0908  3420               	retlw	32	;' '
   761     0909  3453               	retlw	83	;'S'
   762     090A  3461               	retlw	97	;'a'
   763     090B  3462               	retlw	98	;'b'
   764     090C  3461               	retlw	97	;'a'
   765     090D  3464               	retlw	100	;'d'
   766     090E  346F               	retlw	111	;'o'
   767     090F  3420               	retlw	32	;' '
   768     0910  3400               	retlw	0
   769     0911                     STR_12:
   770     0911  3431               	retlw	49	;'1'
   771     0912  3420               	retlw	32	;' '
   772     0913  342D               	retlw	45	;'-'
   773     0914  3420               	retlw	32	;' '
   774     0915  3444               	retlw	68	;'D'
   775     0916  346F               	retlw	111	;'o'
   776     0917  346D               	retlw	109	;'m'
   777     0918  3469               	retlw	105	;'i'
   778     0919  346E               	retlw	110	;'n'
   779     091A  3467               	retlw	103	;'g'
   780     091B  346F               	retlw	111	;'o'
   781     091C  3400               	retlw	0
   782     091D                     STR_1:
   783     091D  3420               	retlw	32	;' '
   784     091E  3444               	retlw	68	;'D'
   785     091F  346F               	retlw	111	;'o'
   786     0920  346D               	retlw	109	;'m'
   787     0921  3469               	retlw	105	;'i'
   788     0922  346E               	retlw	110	;'n'
   789     0923  3467               	retlw	103	;'g'
   790     0924  346F               	retlw	111	;'o'
   791     0925  3420               	retlw	32	;' '
   792     0926  3400               	retlw	0
   793     08A9                     
   794                           	psect	cinit
   795     07F9                     start_initialization:	
   796                           ; #config settings
   797                           
   798     07F9                     __initialization:
   799                           
   800                           ; Clear objects allocated to BANK0
   801     07F9  1283               	bcf	3,5	;RP0=0, select bank0
   802     07FA  1303               	bcf	3,6	;RP1=0, select bank0
   803     07FB  01B6               	clrf	__pbssBANK0& (0+127)
   804     07FC                     end_of_initialization:	
   805                           ;End of C runtime variable initialization code
   806                           
   807     07FC                     __end_of__initialization:
   808     07FC  0183               	clrf	3
   809     07FD  120A  118A  2AC9   	ljmp	_main	;jump to C main() function
   810                           
   811                           	psect	bssBANK0
   812     0036                     __pbssBANK0:
   813     0036                     _uart_rd:
   814     0036                     	ds	1
   815                           
   816                           	psect	cstackCOMMON
   817     0070                     __pcstackCOMMON:
   818     0070                     ?_I2C_Send_ACK:
   819     0070                     ??_I2C_Send_ACK:	
   820                           ; 1 bytes @ 0x0
   821                           
   822     0070                     ?_Get_RTC:	
   823                           ; 1 bytes @ 0x0
   824                           
   825     0070                     ?_Write_RTC:	
   826                           ; 1 bytes @ 0x0
   827                           
   828     0070                     ?_I2C_Init:	
   829                           ; 1 bytes @ 0x0
   830                           
   831     0070                     ??_I2C_Init:	
   832                           ; 1 bytes @ 0x0
   833                           
   834     0070                     ?_I2C_Wait:	
   835                           ; 1 bytes @ 0x0
   836                           
   837     0070                     ??_I2C_Wait:	
   838                           ; 1 bytes @ 0x0
   839                           
   840     0070                     ?_I2C_Start:	
   841                           ; 1 bytes @ 0x0
   842                           
   843     0070                     ??_I2C_Start:	
   844                           ; 1 bytes @ 0x0
   845                           
   846     0070                     ?_I2C_Stop:	
   847                           ; 1 bytes @ 0x0
   848                           
   849     0070                     ??_I2C_Stop:	
   850                           ; 1 bytes @ 0x0
   851                           
   852     0070                     ?_I2C_Write:	
   853                           ; 1 bytes @ 0x0
   854                           
   855     0070                     ??_I2C_Write:	
   856                           ; 1 bytes @ 0x0
   857                           
   858     0070                     ?_I2C_Read:	
   859                           ; 1 bytes @ 0x0
   860                           
   861     0070                     ?_UART_Init:	
   862                           ; 1 bytes @ 0x0
   863                           
   864     0070                     ??_UART_Init:	
   865                           ; 1 bytes @ 0x0
   866                           
   867     0070                     ?_UART_Write:	
   868                           ; 1 bytes @ 0x0
   869                           
   870     0070                     ??_UART_Write:	
   871                           ; 1 bytes @ 0x0
   872                           
   873     0070                     ?_UART_Read:	
   874                           ; 1 bytes @ 0x0
   875                           
   876     0070                     ??_UART_Read:	
   877                           ; 1 bytes @ 0x0
   878                           
   879     0070                     ?_RTC_Init:	
   880                           ; 1 bytes @ 0x0
   881                           
   882     0070                     ?_BCD_to_DEC:	
   883                           ; 1 bytes @ 0x0
   884                           
   885     0070                     ?_DEC_to_BCD:	
   886                           ; 1 bytes @ 0x0
   887                           
   888     0070                     ?_DEC_to_ASCII:	
   889                           ; 1 bytes @ 0x0
   890                           
   891     0070                     ??_DEC_to_ASCII:	
   892                           ; 1 bytes @ 0x0
   893                           
   894     0070                     ?_ASCII_to_DEC:	
   895                           ; 1 bytes @ 0x0
   896                           
   897     0070                     ??_ASCII_to_DEC:	
   898                           ; 1 bytes @ 0x0
   899                           
   900     0070                     ?_main:	
   901                           ; 1 bytes @ 0x0
   902                           
   903     0070                     ?___awdiv:	
   904                           ; 1 bytes @ 0x0
   905                           
   906     0070                     ?___awmod:	
   907                           ; 2 bytes @ 0x0
   908                           
   909     0070                     I2C_Write@data:	
   910                           ; 2 bytes @ 0x0
   911                           
   912     0070                     I2C_Send_ACK@ack:	
   913                           ; 1 bytes @ 0x0
   914                           
   915     0070                     UART_Write@data:	
   916                           ; 1 bytes @ 0x0
   917                           
   918     0070                     DEC_to_ASCII@dec:	
   919                           ; 1 bytes @ 0x0
   920                           
   921     0070                     ASCII_to_DEC@dec:	
   922                           ; 1 bytes @ 0x0
   923                           
   924     0070                     ___awdiv@divisor:	
   925                           ; 1 bytes @ 0x0
   926                           
   927     0070                     ___awmod@divisor:	
   928                           ; 2 bytes @ 0x0
   929                           
   930                           
   931                           ; 2 bytes @ 0x0
   932     0070                     	ds	1
   933     0071                     ??_I2C_Read:
   934     0071                     ?_UART_Write_Text:	
   935                           ; 1 bytes @ 0x1
   936                           
   937     0071                     ??_RTC_Init:	
   938                           ; 1 bytes @ 0x1
   939                           
   940     0071                     ?_RTC_Set_Time:	
   941                           ; 1 bytes @ 0x1
   942                           
   943     0071                     I2C_Read@acknowledge:	
   944                           ; 1 bytes @ 0x1
   945                           
   946     0071                     RTC_Set_Time@minute:	
   947                           ; 1 bytes @ 0x1
   948                           
   949     0071                     UART_Write_Text@text:	
   950                           ; 1 bytes @ 0x1
   951                           
   952                           
   953                           ; 2 bytes @ 0x1
   954     0071                     	ds	1
   955     0072                     I2C_Read@read_data:
   956     0072                     RTC_Set_Time@hour:	
   957                           ; 1 bytes @ 0x2
   958                           
   959     0072                     ___awdiv@dividend:	
   960                           ; 1 bytes @ 0x2
   961                           
   962     0072                     ___awmod@dividend:	
   963                           ; 2 bytes @ 0x2
   964                           
   965                           
   966                           ; 2 bytes @ 0x2
   967     0072                     	ds	1
   968     0073                     ??_UART_Write_Text:
   969     0073                     ?_RTC_Get_Time:	
   970                           ; 1 bytes @ 0x3
   971                           
   972     0073                     RTC_Set_Time@dayweek:	
   973                           ; 1 bytes @ 0x3
   974                           
   975     0073                     RTC_Get_Time@minute:	
   976                           ; 1 bytes @ 0x3
   977                           
   978                           
   979                           ; 1 bytes @ 0x3
   980     0073                     	ds	1
   981     0074                     ??___awdiv:
   982     0074                     ??___awmod:	
   983                           ; 1 bytes @ 0x4
   984                           
   985     0074                     RTC_Set_Time@day:	
   986                           ; 1 bytes @ 0x4
   987                           
   988     0074                     RTC_Get_Time@hour:	
   989                           ; 1 bytes @ 0x4
   990                           
   991     0074                     ___awdiv@counter:	
   992                           ; 1 bytes @ 0x4
   993                           
   994     0074                     ___awmod@counter:	
   995                           ; 1 bytes @ 0x4
   996                           
   997                           
   998                           ; 1 bytes @ 0x4
   999     0074                     	ds	1
  1000     0075                     RTC_Set_Time@month:
  1001     0075                     RTC_Get_Time@dayweek:	
  1002                           ; 1 bytes @ 0x5
  1003                           
  1004     0075                     ___awdiv@sign:	
  1005                           ; 1 bytes @ 0x5
  1006                           
  1007     0075                     ___awmod@sign:	
  1008                           ; 1 bytes @ 0x5
  1009                           
  1010                           
  1011                           ; 1 bytes @ 0x5
  1012     0075                     	ds	1
  1013     0076                     RTC_Set_Time@year:
  1014     0076                     RTC_Get_Time@day:	
  1015                           ; 1 bytes @ 0x6
  1016                           
  1017     0076                     UART_Write_Text@i:	
  1018                           ; 1 bytes @ 0x6
  1019                           
  1020     0076                     ___awdiv@quotient:	
  1021                           ; 2 bytes @ 0x6
  1022                           
  1023                           
  1024                           ; 2 bytes @ 0x6
  1025     0076                     	ds	1
  1026     0077                     ??_RTC_Set_Time:
  1027     0077                     RTC_Set_Time@second:	
  1028                           ; 1 bytes @ 0x7
  1029                           
  1030     0077                     RTC_Get_Time@month:	
  1031                           ; 1 bytes @ 0x7
  1032                           
  1033                           
  1034                           ; 1 bytes @ 0x7
  1035     0077                     	ds	1
  1036     0078                     ?_UART_Write_Text_ln:
  1037     0078                     ??_DEC_to_BCD:	
  1038                           ; 1 bytes @ 0x8
  1039                           
  1040     0078                     ?___bmul:	
  1041                           ; 1 bytes @ 0x8
  1042                           
  1043     0078                     RTC_Get_Time@year:	
  1044                           ; 1 bytes @ 0x8
  1045                           
  1046     0078                     ___bmul@multiplicand:	
  1047                           ; 1 bytes @ 0x8
  1048                           
  1049     0078                     UART_Write_Text_ln@text:	
  1050                           ; 1 bytes @ 0x8
  1051                           
  1052                           
  1053                           ; 2 bytes @ 0x8
  1054     0078                     	ds	1
  1055     0079                     ??_RTC_Get_Time:
  1056     0079                     ??___bmul:	
  1057                           ; 1 bytes @ 0x9
  1058                           
  1059     0079                     RTC_Get_Time@second:	
  1060                           ; 1 bytes @ 0x9
  1061                           
  1062     0079                     ___bmul@product:	
  1063                           ; 1 bytes @ 0x9
  1064                           
  1065                           
  1066                           ; 1 bytes @ 0x9
  1067     0079                     	ds	1
  1068     007A                     ??_UART_Write_Text_ln:
  1069     007A                     ___bmul@multiplier:	
  1070                           ; 1 bytes @ 0xA
  1071                           
  1072                           
  1073                           ; 1 bytes @ 0xA
  1074     007A                     	ds	1
  1075     007B                     ??_BCD_to_DEC:
  1076                           
  1077                           ; 1 bytes @ 0xB
  1078     007B                     	ds	2
  1079     007D                     DEC_to_BCD@dec:
  1080                           
  1081                           ; 1 bytes @ 0xD
  1082     007D                     	ds	1
  1083     007E                     ??_Write_RTC:
  1084                           
  1085                           	psect	cstackBANK0
  1086     0020                     __pcstackBANK0:	
  1087                           ; 1 bytes @ 0xE
  1088                           
  1089     0020                     BCD_to_DEC@bcd:
  1090     0020                     Write_RTC@hour_tens:	
  1091                           ; 1 bytes @ 0x0
  1092                           
  1093                           
  1094                           ; 1 bytes @ 0x0
  1095     0020                     	ds	1
  1096     0021                     ??_Get_RTC:
  1097     0021                     Write_RTC@hour_units:	
  1098                           ; 1 bytes @ 0x1
  1099                           
  1100                           
  1101                           ; 1 bytes @ 0x1
  1102     0021                     	ds	1
  1103     0022                     Write_RTC@min_tens:
  1104                           
  1105                           ; 1 bytes @ 0x2
  1106     0022                     	ds	1
  1107     0023                     Get_RTC@RC_Dayweek:
  1108     0023                     Write_RTC@min_units:	
  1109                           ; 1 bytes @ 0x3
  1110                           
  1111                           
  1112                           ; 1 bytes @ 0x3
  1113     0023                     	ds	1
  1114     0024                     Get_RTC@RC_Seconds:
  1115     0024                     Write_RTC@sec_tens:	
  1116                           ; 1 bytes @ 0x4
  1117                           
  1118                           
  1119                           ; 1 bytes @ 0x4
  1120     0024                     	ds	1
  1121     0025                     Get_RTC@RC_Minuts:
  1122     0025                     Write_RTC@sec_units:	
  1123                           ; 1 bytes @ 0x5
  1124                           
  1125                           
  1126                           ; 1 bytes @ 0x5
  1127     0025                     	ds	1
  1128     0026                     Get_RTC@RC_Hour:
  1129     0026                     Write_RTC@dia_tens:	
  1130                           ; 1 bytes @ 0x6
  1131                           
  1132                           
  1133                           ; 1 bytes @ 0x6
  1134     0026                     	ds	1
  1135     0027                     Get_RTC@RC_Day:
  1136     0027                     Write_RTC@dia_units:	
  1137                           ; 1 bytes @ 0x7
  1138                           
  1139                           
  1140                           ; 1 bytes @ 0x7
  1141     0027                     	ds	1
  1142     0028                     Get_RTC@RC_Month:
  1143     0028                     Write_RTC@mes_tens:	
  1144                           ; 1 bytes @ 0x8
  1145                           
  1146                           
  1147                           ; 1 bytes @ 0x8
  1148     0028                     	ds	1
  1149     0029                     Get_RTC@RC_Year:
  1150     0029                     Write_RTC@mes_units:	
  1151                           ; 1 bytes @ 0x9
  1152                           
  1153                           
  1154                           ; 1 bytes @ 0x9
  1155     0029                     	ds	1
  1156     002A                     Write_RTC@ano_tens:
  1157                           
  1158                           ; 1 bytes @ 0xA
  1159     002A                     	ds	1
  1160     002B                     Write_RTC@ano_units:
  1161                           
  1162                           ; 1 bytes @ 0xB
  1163     002B                     	ds	1
  1164     002C                     Write_RTC@dia_semana:
  1165                           
  1166                           ; 1 bytes @ 0xC
  1167     002C                     	ds	1
  1168     002D                     Write_RTC@dia:
  1169                           
  1170                           ; 1 bytes @ 0xD
  1171     002D                     	ds	1
  1172     002E                     Write_RTC@mes:
  1173                           
  1174                           ; 1 bytes @ 0xE
  1175     002E                     	ds	1
  1176     002F                     Write_RTC@ano:
  1177                           
  1178                           ; 1 bytes @ 0xF
  1179     002F                     	ds	1
  1180     0030                     Write_RTC@hour:
  1181                           
  1182                           ; 1 bytes @ 0x10
  1183     0030                     	ds	1
  1184     0031                     Write_RTC@min:
  1185                           
  1186                           ; 1 bytes @ 0x11
  1187     0031                     	ds	1
  1188     0032                     Write_RTC@sec:
  1189                           
  1190                           ; 1 bytes @ 0x12
  1191     0032                     	ds	1
  1192     0033                     ??_main:
  1193                           
  1194                           ; 1 bytes @ 0x13
  1195     0033                     	ds	3
  1196                           
  1197                           	psect	maintext
  1198     02C9                     __pmaintext:	
  1199 ;;
  1200 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1201 ;;
  1202 ;; *************** function _main *****************
  1203 ;; Defined at:
  1204 ;;		line 20 in file "main.c"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;		None
  1207 ;; Auto vars:     Size  Location     Type
  1208 ;;		None
  1209 ;; Return value:  Size  Location     Type
  1210 ;;                  1    wreg      void 
  1211 ;; Registers used:
  1212 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1213 ;; Tracked objects:
  1214 ;;		On entry : B00/0
  1215 ;;		On exit  : 0/0
  1216 ;;		Unchanged: 0/0
  1217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1218 ;;      Params:         0       0       0       0       0
  1219 ;;      Locals:         0       0       0       0       0
  1220 ;;      Temps:          0       3       0       0       0
  1221 ;;      Totals:         0       3       0       0       0
  1222 ;;Total ram usage:        3 bytes
  1223 ;; Hardware stack levels required when called: 5
  1224 ;; This function calls:
  1225 ;;		_Get_RTC
  1226 ;;		_I2C_Init
  1227 ;;		_RTC_Init
  1228 ;;		_UART_Init
  1229 ;;		_UART_Read
  1230 ;;		_Write_RTC
  1231 ;; This function is called by:
  1232 ;;		Startup code after reset
  1233 ;; This function uses a non-reentrant model
  1234 ;;
  1235                           
  1236     02C9                     _main:	
  1237                           ;psect for function _main
  1238                           
  1239     02C9                     l1476:	
  1240                           ;incstack = 0
  1241                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1242                           
  1243                           
  1244                           ;main.c: 21:     CMCON = 0x07;
  1245     02C9  3007               	movlw	7
  1246     02CA  1683               	bsf	3,5	;RP0=1, select bank1
  1247     02CB  1303               	bcf	3,6	;RP1=0, select bank1
  1248     02CC  009C               	movwf	28	;volatile
  1249     02CD                     l1478:
  1250                           
  1251                           ;main.c: 23:     UART_Init();
  1252     02CD  120A  118A  2176  120A  118A  	fcall	_UART_Init
  1253     02D2                     l1480:
  1254                           
  1255                           ;main.c: 24:     _delay((unsigned long)((50)*(20000000/4000.0)));
  1256     02D2  3002               	movlw	2
  1257     02D3  1283               	bcf	3,5	;RP0=0, select bank0
  1258     02D4  1303               	bcf	3,6	;RP1=0, select bank0
  1259     02D5  00B5               	movwf	??_main+2
  1260     02D6  3045               	movlw	69
  1261     02D7  00B4               	movwf	??_main+1
  1262     02D8  30A9               	movlw	169
  1263     02D9  00B3               	movwf	??_main
  1264     02DA                     u637:
  1265     02DA  0BB3               	decfsz	??_main,f
  1266     02DB  2ADA               	goto	u637
  1267     02DC  0BB4               	decfsz	??_main+1,f
  1268     02DD  2ADA               	goto	u637
  1269     02DE  0BB5               	decfsz	??_main+2,f
  1270     02DF  2ADA               	goto	u637
  1271                           
  1272                           ;main.c: 25:     I2C_Init();
  1273     02E0  120A  118A  2167  120A  118A  	fcall	_I2C_Init
  1274     02E5                     l1482:
  1275                           
  1276                           ;main.c: 26:     _delay((unsigned long)((50)*(20000000/4000.0)));
  1277     02E5  3002               	movlw	2
  1278     02E6  1283               	bcf	3,5	;RP0=0, select bank0
  1279     02E7  1303               	bcf	3,6	;RP1=0, select bank0
  1280     02E8  00B5               	movwf	??_main+2
  1281     02E9  3045               	movlw	69
  1282     02EA  00B4               	movwf	??_main+1
  1283     02EB  30A9               	movlw	169
  1284     02EC  00B3               	movwf	??_main
  1285     02ED                     u647:
  1286     02ED  0BB3               	decfsz	??_main,f
  1287     02EE  2AED               	goto	u647
  1288     02EF  0BB4               	decfsz	??_main+1,f
  1289     02F0  2AED               	goto	u647
  1290     02F1  0BB5               	decfsz	??_main+2,f
  1291     02F2  2AED               	goto	u647
  1292     02F3                     l1484:
  1293                           
  1294                           ;main.c: 27:     RTC_Init();
  1295     02F3  120A  118A  21EE  120A  118A  	fcall	_RTC_Init
  1296     02F8                     l1486:
  1297                           
  1298                           ;main.c: 30:         uart_rd = UART_Read();
  1299     02F8  120A  118A  211A  120A  118A  	fcall	_UART_Read
  1300     02FD  1283               	bcf	3,5	;RP0=0, select bank0
  1301     02FE  1303               	bcf	3,6	;RP1=0, select bank0
  1302     02FF  00B6               	movwf	_uart_rd
  1303                           
  1304                           ;main.c: 32:         switch(uart_rd){
  1305     0300  2B0D               	goto	l1494
  1306     0301                     l1488:
  1307                           
  1308                           ;main.c: 34:                 Get_RTC();
  1309     0301  120A  118A  260F  120A  118A  	fcall	_Get_RTC
  1310                           
  1311                           ;main.c: 35:                 break;
  1312     0306  2AF8               	goto	l1486
  1313     0307                     l1490:
  1314                           
  1315                           ;main.c: 37:                 Write_RTC();
  1316     0307  120A  118A  2446  120A  118A  	fcall	_Write_RTC
  1317                           
  1318                           ;main.c: 38:                 break;
  1319     030C  2AF8               	goto	l1486
  1320     030D                     l1494:
  1321     030D  0836               	movf	_uart_rd,w
  1322                           
  1323                           ; Switch size 1, requested type "simple"
  1324                           ; Number of cases is 2, Range of values is 72 to 86
  1325                           ; switch strategies available:
  1326                           ; Name         Instructions Cycles
  1327                           ; simple_byte            7     4 (average)
  1328                           ; direct_byte           56    11 (fixed)
  1329                           ; jumptable            263     9 (fixed)
  1330                           ;	Chosen strategy is simple_byte
  1331     030E  3A48               	xorlw	72	; case 72
  1332     030F  1903               	skipnz
  1333     0310  2B01               	goto	l1488
  1334     0311  3A1E               	xorlw	30	; case 86
  1335     0312  1903               	skipnz
  1336     0313  2B07               	goto	l1490
  1337     0314  2AF8               	goto	l1486
  1338     0315  120A  118A  2800   	ljmp	start
  1339     0318                     __end_of_main:
  1340                           
  1341                           	psect	text1
  1342     0446                     __ptext1:	
  1343 ;; *************** function _Write_RTC *****************
  1344 ;; Defined at:
  1345 ;;		line 99 in file "main.c"
  1346 ;; Parameters:    Size  Location     Type
  1347 ;;		None
  1348 ;; Auto vars:     Size  Location     Type
  1349 ;;  sec             1   18[BANK0 ] unsigned char 
  1350 ;;  min             1   17[BANK0 ] unsigned char 
  1351 ;;  hour            1   16[BANK0 ] unsigned char 
  1352 ;;  ano             1   15[BANK0 ] unsigned char 
  1353 ;;  mes             1   14[BANK0 ] unsigned char 
  1354 ;;  dia             1   13[BANK0 ] unsigned char 
  1355 ;;  dia_semana      1   12[BANK0 ] unsigned char 
  1356 ;;  ano_units       1   11[BANK0 ] unsigned char 
  1357 ;;  ano_tens        1   10[BANK0 ] unsigned char 
  1358 ;;  mes_units       1    9[BANK0 ] unsigned char 
  1359 ;;  mes_tens        1    8[BANK0 ] unsigned char 
  1360 ;;  dia_units       1    7[BANK0 ] unsigned char 
  1361 ;;  dia_tens        1    6[BANK0 ] unsigned char 
  1362 ;;  sec_units       1    5[BANK0 ] unsigned char 
  1363 ;;  sec_tens        1    4[BANK0 ] unsigned char 
  1364 ;;  min_units       1    3[BANK0 ] unsigned char 
  1365 ;;  min_tens        1    2[BANK0 ] unsigned char 
  1366 ;;  hour_units      1    1[BANK0 ] unsigned char 
  1367 ;;  hour_tens       1    0[BANK0 ] unsigned char 
  1368 ;; Return value:  Size  Location     Type
  1369 ;;                  1    wreg      void 
  1370 ;; Registers used:
  1371 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1372 ;; Tracked objects:
  1373 ;;		On entry : 0/0
  1374 ;;		On exit  : 0/0
  1375 ;;		Unchanged: 0/0
  1376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1377 ;;      Params:         0       0       0       0       0
  1378 ;;      Locals:         0      19       0       0       0
  1379 ;;      Temps:          0       0       0       0       0
  1380 ;;      Totals:         0      19       0       0       0
  1381 ;;Total ram usage:       19 bytes
  1382 ;; Hardware stack levels used: 1
  1383 ;; Hardware stack levels required when called: 3
  1384 ;; This function calls:
  1385 ;;		_ASCII_to_DEC
  1386 ;;		_DEC_to_BCD
  1387 ;;		_RTC_Set_Time
  1388 ;;		_UART_Read
  1389 ;;		_UART_Write_Text_ln
  1390 ;;		___bmul
  1391 ;; This function is called by:
  1392 ;;		_main
  1393 ;; This function uses a non-reentrant model
  1394 ;;
  1395                           
  1396     0446                     _Write_RTC:	
  1397                           ;psect for function _Write_RTC
  1398                           
  1399     0446                     l1388:	
  1400                           ;incstack = 0
  1401                           ; Regs used in _Write_RTC: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1402                           
  1403                           
  1404                           ;main.c: 100:     unsigned char hour_tens, hour_units, min_tens, min_units, sec_tens,;ma
      +                          in.c: 101:             sec_units, dia_tens, dia_units, mes_tens, mes_units, ano_tens,;ma
      +                          in.c: 102:             ano_units, dia_semana;;main.c: 105:     UART_Write_Text_ln("Digit
      +                          e o dia: ");
  1405     0446  30D8               	movlw	low (STR_8| (0+32768))
  1406     0447  00F8               	movwf	UART_Write_Text_ln@text
  1407     0448  3088               	movlw	high (STR_8| (0+32768))
  1408     0449  00F9               	movwf	UART_Write_Text_ln@text+1
  1409     044A  120A  118A  219E  120A  118A  	fcall	_UART_Write_Text_ln
  1410     044F                     l1390:
  1411                           
  1412                           ;main.c: 106:     dia_tens = ASCII_to_DEC(UART_Read());
  1413     044F  120A  118A  211A  120A  118A  	fcall	_UART_Read
  1414     0454  120A  118A  2116  120A  118A  	fcall	_ASCII_to_DEC
  1415     0459  1283               	bcf	3,5	;RP0=0, select bank0
  1416     045A  1303               	bcf	3,6	;RP1=0, select bank0
  1417     045B  00A6               	movwf	Write_RTC@dia_tens
  1418     045C                     l1392:
  1419                           
  1420                           ;main.c: 107:     dia_units = ASCII_to_DEC(UART_Read());
  1421     045C  120A  118A  211A  120A  118A  	fcall	_UART_Read
  1422     0461  120A  118A  2116  120A  118A  	fcall	_ASCII_to_DEC
  1423     0466  1283               	bcf	3,5	;RP0=0, select bank0
  1424     0467  1303               	bcf	3,6	;RP1=0, select bank0
  1425     0468  00A7               	movwf	Write_RTC@dia_units
  1426     0469                     l1394:
  1427                           
  1428                           ;main.c: 108:     UART_Read();
  1429     0469  120A  118A  211A  120A  118A  	fcall	_UART_Read
  1430     046E                     l1396:
  1431                           
  1432                           ;main.c: 111:     UART_Write_Text_ln("Digite o mes: ");
  1433     046E  30F6               	movlw	low (STR_9| (0+32768))
  1434     046F  00F8               	movwf	UART_Write_Text_ln@text
  1435     0470  3088               	movlw	high (STR_9| (0+32768))
  1436     0471  00F9               	movwf	UART_Write_Text_ln@text+1
  1437     0472  120A  118A  219E  120A  118A  	fcall	_UART_Write_Text_ln
  1438                           
  1439                           ;main.c: 112:     mes_tens = ASCII_to_DEC(UART_Read());
  1440     0477  120A  118A  211A  120A  118A  	fcall	_UART_Read
  1441     047C  120A  118A  2116  120A  118A  	fcall	_ASCII_to_DEC
  1442     0481  1283               	bcf	3,5	;RP0=0, select bank0
  1443     0482  1303               	bcf	3,6	;RP1=0, select bank0
  1444     0483  00A8               	movwf	Write_RTC@mes_tens
  1445                           
  1446                           ;main.c: 113:     mes_units = ASCII_to_DEC(UART_Read());
  1447     0484  120A  118A  211A  120A  118A  	fcall	_UART_Read
  1448     0489  120A  118A  2116  120A  118A  	fcall	_ASCII_to_DEC
  1449     048E  1283               	bcf	3,5	;RP0=0, select bank0
  1450     048F  1303               	bcf	3,6	;RP1=0, select bank0
  1451     0490  00A9               	movwf	Write_RTC@mes_units
  1452                           
  1453                           ;main.c: 114:     UART_Read();
  1454     0491  120A  118A  211A  120A  118A  	fcall	_UART_Read
  1455     0496                     l1398:
  1456                           
  1457                           ;main.c: 117:     UART_Write_Text_ln("Digite o ano: ");
  1458     0496  30E7               	movlw	low (STR_10| (0+32768))
  1459     0497  00F8               	movwf	UART_Write_Text_ln@text
  1460     0498  3088               	movlw	high (STR_10| (0+32768))
  1461     0499  00F9               	movwf	UART_Write_Text_ln@text+1
  1462     049A  120A  118A  219E  120A  118A  	fcall	_UART_Write_Text_ln
  1463     049F                     l1400:
  1464                           
  1465                           ;main.c: 118:     ano_tens = ASCII_to_DEC(UART_Read());
  1466     049F  120A  118A  211A  120A  118A  	fcall	_UART_Read
  1467     04A4  120A  118A  2116  120A  118A  	fcall	_ASCII_to_DEC
  1468     04A9  1283               	bcf	3,5	;RP0=0, select bank0
  1469     04AA  1303               	bcf	3,6	;RP1=0, select bank0
  1470     04AB  00AA               	movwf	Write_RTC@ano_tens
  1471     04AC                     l1402:
  1472                           
  1473                           ;main.c: 119:     ano_units = ASCII_to_DEC(UART_Read());
  1474     04AC  120A  118A  211A  120A  118A  	fcall	_UART_Read
  1475     04B1  120A  118A  2116  120A  118A  	fcall	_ASCII_to_DEC
  1476     04B6  1283               	bcf	3,5	;RP0=0, select bank0
  1477     04B7  1303               	bcf	3,6	;RP1=0, select bank0
  1478     04B8  00AB               	movwf	Write_RTC@ano_units
  1479     04B9                     l1404:
  1480                           
  1481                           ;main.c: 122:     UART_Write_Text_ln("Digite o numero correspondente ao dia da semana: "
      +                          );
  1482     04B9  3000               	movlw	low (STR_11| (0+32768))
  1483     04BA  00F8               	movwf	UART_Write_Text_ln@text
  1484     04BB  3088               	movlw	high (STR_11| (0+32768))
  1485     04BC  00F9               	movwf	UART_Write_Text_ln@text+1
  1486     04BD  120A  118A  219E  120A  118A  	fcall	_UART_Write_Text_ln
  1487     04C2                     l1406:
  1488                           
  1489                           ;main.c: 123:     UART_Write_Text_ln("1 - Domingo");
  1490     04C2  3011               	movlw	low (STR_12| (0+32768))
  1491     04C3  00F8               	movwf	UART_Write_Text_ln@text
  1492     04C4  3089               	movlw	high (STR_12| (0+32768))
  1493     04C5  00F9               	movwf	UART_Write_Text_ln@text+1
  1494     04C6  120A  118A  219E  120A  118A  	fcall	_UART_Write_Text_ln
  1495     04CB                     l1408:
  1496                           
  1497                           ;main.c: 124:     UART_Write_Text_ln("2 - Segunda Feira ");
  1498     04CB  306F               	movlw	low (STR_13| (0+32768))
  1499     04CC  00F8               	movwf	UART_Write_Text_ln@text
  1500     04CD  3088               	movlw	high (STR_13| (0+32768))
  1501     04CE  00F9               	movwf	UART_Write_Text_ln@text+1
  1502     04CF  120A  118A  219E  120A  118A  	fcall	_UART_Write_Text_ln
  1503     04D4                     l1410:
  1504                           
  1505                           ;main.c: 125:     UART_Write_Text_ln("3 - Terca Feira ");
  1506     04D4  30A6               	movlw	low (STR_14| (0+32768))
  1507     04D5  00F8               	movwf	UART_Write_Text_ln@text
  1508     04D6  3088               	movlw	high (STR_14| (0+32768))
  1509     04D7  00F9               	movwf	UART_Write_Text_ln@text+1
  1510     04D8  120A  118A  219E  120A  118A  	fcall	_UART_Write_Text_ln
  1511     04DD                     l1412:
  1512                           
  1513                           ;main.c: 126:     UART_Write_Text_ln("4 - Quarta Feira ");
  1514     04DD  3094               	movlw	low (STR_15| (0+32768))
  1515     04DE  00F8               	movwf	UART_Write_Text_ln@text
  1516     04DF  3088               	movlw	high (STR_15| (0+32768))
  1517     04E0  00F9               	movwf	UART_Write_Text_ln@text+1
  1518     04E1  120A  118A  219E  120A  118A  	fcall	_UART_Write_Text_ln
  1519     04E6                     l1414:
  1520                           
  1521                           ;main.c: 127:     UART_Write_Text_ln("5 - Quinta Feira ");
  1522     04E6  3082               	movlw	low (STR_16| (0+32768))
  1523     04E7  00F8               	movwf	UART_Write_Text_ln@text
  1524     04E8  3088               	movlw	high (STR_16| (0+32768))
  1525     04E9  00F9               	movwf	UART_Write_Text_ln@text+1
  1526     04EA  120A  118A  219E  120A  118A  	fcall	_UART_Write_Text_ln
  1527     04EF                     l1416:
  1528                           
  1529                           ;main.c: 128:     UART_Write_Text_ln("6 - Sexta Feira ");
  1530     04EF  30B7               	movlw	low (STR_17| (0+32768))
  1531     04F0  00F8               	movwf	UART_Write_Text_ln@text
  1532     04F1  3088               	movlw	high (STR_17| (0+32768))
  1533     04F2  00F9               	movwf	UART_Write_Text_ln@text+1
  1534     04F3  120A  118A  219E  120A  118A  	fcall	_UART_Write_Text_ln
  1535     04F8                     l1418:
  1536                           
  1537                           ;main.c: 129:     UART_Write_Text_ln("7 - Sabado ");
  1538     04F8  3005               	movlw	low (STR_18| (0+32768))
  1539     04F9  00F8               	movwf	UART_Write_Text_ln@text
  1540     04FA  3089               	movlw	high (STR_18| (0+32768))
  1541     04FB  00F9               	movwf	UART_Write_Text_ln@text+1
  1542     04FC  120A  118A  219E  120A  118A  	fcall	_UART_Write_Text_ln
  1543     0501                     l1420:
  1544                           
  1545                           ;main.c: 130:     dia_semana = ASCII_to_DEC(UART_Read());
  1546     0501  120A  118A  211A  120A  118A  	fcall	_UART_Read
  1547     0506  120A  118A  2116  120A  118A  	fcall	_ASCII_to_DEC
  1548     050B  1283               	bcf	3,5	;RP0=0, select bank0
  1549     050C  1303               	bcf	3,6	;RP1=0, select bank0
  1550     050D  00AC               	movwf	Write_RTC@dia_semana
  1551                           
  1552                           ;main.c: 133:     UART_Write_Text_ln("Digite a Hora: ");
  1553     050E  30C8               	movlw	low (STR_19| (0+32768))
  1554     050F  00F8               	movwf	UART_Write_Text_ln@text
  1555     0510  3088               	movlw	high (STR_19| (0+32768))
  1556     0511  00F9               	movwf	UART_Write_Text_ln@text+1
  1557     0512  120A  118A  219E  120A  118A  	fcall	_UART_Write_Text_ln
  1558     0517                     l1422:
  1559                           
  1560                           ;main.c: 134:     hour_tens = ASCII_to_DEC(UART_Read());
  1561     0517  120A  118A  211A  120A  118A  	fcall	_UART_Read
  1562     051C  120A  118A  2116  120A  118A  	fcall	_ASCII_to_DEC
  1563     0521  1283               	bcf	3,5	;RP0=0, select bank0
  1564     0522  1303               	bcf	3,6	;RP1=0, select bank0
  1565     0523  00A0               	movwf	Write_RTC@hour_tens
  1566     0524                     l1424:
  1567                           
  1568                           ;main.c: 135:     hour_units = ASCII_to_DEC(UART_Read());
  1569     0524  120A  118A  211A  120A  118A  	fcall	_UART_Read
  1570     0529  120A  118A  2116  120A  118A  	fcall	_ASCII_to_DEC
  1571     052E  1283               	bcf	3,5	;RP0=0, select bank0
  1572     052F  1303               	bcf	3,6	;RP1=0, select bank0
  1573     0530  00A1               	movwf	Write_RTC@hour_units
  1574     0531                     l1426:
  1575                           
  1576                           ;main.c: 136:     UART_Read();
  1577     0531  120A  118A  211A  120A  118A  	fcall	_UART_Read
  1578     0536                     l1428:
  1579                           
  1580                           ;main.c: 139:     UART_Write_Text_ln("Digite os minutos: ");
  1581     0536  3047               	movlw	low (STR_20| (0+32768))
  1582     0537  00F8               	movwf	UART_Write_Text_ln@text
  1583     0538  3088               	movlw	high (STR_20| (0+32768))
  1584     0539  00F9               	movwf	UART_Write_Text_ln@text+1
  1585     053A  120A  118A  219E  120A  118A  	fcall	_UART_Write_Text_ln
  1586                           
  1587                           ;main.c: 140:     min_tens = ASCII_to_DEC(UART_Read());
  1588     053F  120A  118A  211A  120A  118A  	fcall	_UART_Read
  1589     0544  120A  118A  2116  120A  118A  	fcall	_ASCII_to_DEC
  1590     0549  1283               	bcf	3,5	;RP0=0, select bank0
  1591     054A  1303               	bcf	3,6	;RP1=0, select bank0
  1592     054B  00A2               	movwf	Write_RTC@min_tens
  1593                           
  1594                           ;main.c: 141:     min_units = ASCII_to_DEC(UART_Read());
  1595     054C  120A  118A  211A  120A  118A  	fcall	_UART_Read
  1596     0551  120A  118A  2116  120A  118A  	fcall	_ASCII_to_DEC
  1597     0556  1283               	bcf	3,5	;RP0=0, select bank0
  1598     0557  1303               	bcf	3,6	;RP1=0, select bank0
  1599     0558  00A3               	movwf	Write_RTC@min_units
  1600                           
  1601                           ;main.c: 142:     UART_Read();
  1602     0559  120A  118A  211A  120A  118A  	fcall	_UART_Read
  1603     055E                     l1430:
  1604                           
  1605                           ;main.c: 145:     UART_Write_Text_ln("Digite os segundos: ");
  1606     055E  3032               	movlw	low (STR_21| (0+32768))
  1607     055F  00F8               	movwf	UART_Write_Text_ln@text
  1608     0560  3088               	movlw	high (STR_21| (0+32768))
  1609     0561  00F9               	movwf	UART_Write_Text_ln@text+1
  1610     0562  120A  118A  219E  120A  118A  	fcall	_UART_Write_Text_ln
  1611     0567                     l1432:
  1612                           
  1613                           ;main.c: 146:     sec_tens = ASCII_to_DEC(UART_Read());
  1614     0567  120A  118A  211A  120A  118A  	fcall	_UART_Read
  1615     056C  120A  118A  2116  120A  118A  	fcall	_ASCII_to_DEC
  1616     0571  1283               	bcf	3,5	;RP0=0, select bank0
  1617     0572  1303               	bcf	3,6	;RP1=0, select bank0
  1618     0573  00A4               	movwf	Write_RTC@sec_tens
  1619     0574                     l1434:
  1620                           
  1621                           ;main.c: 147:     sec_units = ASCII_to_DEC(UART_Read());
  1622     0574  120A  118A  211A  120A  118A  	fcall	_UART_Read
  1623     0579  120A  118A  2116  120A  118A  	fcall	_ASCII_to_DEC
  1624     057E  1283               	bcf	3,5	;RP0=0, select bank0
  1625     057F  1303               	bcf	3,6	;RP1=0, select bank0
  1626     0580  00A5               	movwf	Write_RTC@sec_units
  1627     0581                     l1436:
  1628                           
  1629                           ;main.c: 149:     unsigned char dia = DEC_to_BCD((dia_tens * 10) + dia_units);
  1630     0581  300A               	movlw	10
  1631     0582  00F8               	movwf	___bmul@multiplicand
  1632     0583  0826               	movf	Write_RTC@dia_tens,w
  1633     0584  120A  118A  2189  120A  118A  	fcall	___bmul
  1634     0589  1283               	bcf	3,5	;RP0=0, select bank0
  1635     058A  1303               	bcf	3,6	;RP1=0, select bank0
  1636     058B  0727               	addwf	Write_RTC@dia_units,w
  1637     058C  120A  118A  2218  120A  118A  	fcall	_DEC_to_BCD
  1638     0591  1283               	bcf	3,5	;RP0=0, select bank0
  1639     0592  1303               	bcf	3,6	;RP1=0, select bank0
  1640     0593  00AD               	movwf	Write_RTC@dia
  1641     0594                     l1438:
  1642                           
  1643                           ;main.c: 150:     unsigned char mes = DEC_to_BCD((mes_tens * 10) + mes_units);
  1644     0594  300A               	movlw	10
  1645     0595  00F8               	movwf	___bmul@multiplicand
  1646     0596  0828               	movf	Write_RTC@mes_tens,w
  1647     0597  120A  118A  2189  120A  118A  	fcall	___bmul
  1648     059C  1283               	bcf	3,5	;RP0=0, select bank0
  1649     059D  1303               	bcf	3,6	;RP1=0, select bank0
  1650     059E  0729               	addwf	Write_RTC@mes_units,w
  1651     059F  120A  118A  2218  120A  118A  	fcall	_DEC_to_BCD
  1652     05A4  1283               	bcf	3,5	;RP0=0, select bank0
  1653     05A5  1303               	bcf	3,6	;RP1=0, select bank0
  1654     05A6  00AE               	movwf	Write_RTC@mes
  1655     05A7                     l1440:
  1656                           
  1657                           ;main.c: 151:     unsigned char ano = DEC_to_BCD((ano_tens * 10) + ano_units);
  1658     05A7  300A               	movlw	10
  1659     05A8  00F8               	movwf	___bmul@multiplicand
  1660     05A9  082A               	movf	Write_RTC@ano_tens,w
  1661     05AA  120A  118A  2189  120A  118A  	fcall	___bmul
  1662     05AF  1283               	bcf	3,5	;RP0=0, select bank0
  1663     05B0  1303               	bcf	3,6	;RP1=0, select bank0
  1664     05B1  072B               	addwf	Write_RTC@ano_units,w
  1665     05B2  120A  118A  2218  120A  118A  	fcall	_DEC_to_BCD
  1666     05B7  1283               	bcf	3,5	;RP0=0, select bank0
  1667     05B8  1303               	bcf	3,6	;RP1=0, select bank0
  1668     05B9  00AF               	movwf	Write_RTC@ano
  1669     05BA                     l1442:
  1670                           
  1671                           ;main.c: 152:     unsigned char hour = DEC_to_BCD((hour_tens * 10) + hour_units);
  1672     05BA  300A               	movlw	10
  1673     05BB  00F8               	movwf	___bmul@multiplicand
  1674     05BC  0820               	movf	Write_RTC@hour_tens,w
  1675     05BD  120A  118A  2189  120A  118A  	fcall	___bmul
  1676     05C2  1283               	bcf	3,5	;RP0=0, select bank0
  1677     05C3  1303               	bcf	3,6	;RP1=0, select bank0
  1678     05C4  0721               	addwf	Write_RTC@hour_units,w
  1679     05C5  120A  118A  2218  120A  118A  	fcall	_DEC_to_BCD
  1680     05CA  1283               	bcf	3,5	;RP0=0, select bank0
  1681     05CB  1303               	bcf	3,6	;RP1=0, select bank0
  1682     05CC  00B0               	movwf	Write_RTC@hour
  1683     05CD                     l1444:
  1684                           
  1685                           ;main.c: 153:     unsigned char min = DEC_to_BCD((min_tens * 10) + min_units);
  1686     05CD  300A               	movlw	10
  1687     05CE  00F8               	movwf	___bmul@multiplicand
  1688     05CF  0822               	movf	Write_RTC@min_tens,w
  1689     05D0  120A  118A  2189  120A  118A  	fcall	___bmul
  1690     05D5  1283               	bcf	3,5	;RP0=0, select bank0
  1691     05D6  1303               	bcf	3,6	;RP1=0, select bank0
  1692     05D7  0723               	addwf	Write_RTC@min_units,w
  1693     05D8  120A  118A  2218  120A  118A  	fcall	_DEC_to_BCD
  1694     05DD  1283               	bcf	3,5	;RP0=0, select bank0
  1695     05DE  1303               	bcf	3,6	;RP1=0, select bank0
  1696     05DF  00B1               	movwf	Write_RTC@min
  1697     05E0                     l1446:
  1698                           
  1699                           ;main.c: 154:     unsigned char sec = DEC_to_BCD((sec_tens * 10) + sec_units);
  1700     05E0  300A               	movlw	10
  1701     05E1  00F8               	movwf	___bmul@multiplicand
  1702     05E2  0824               	movf	Write_RTC@sec_tens,w
  1703     05E3  120A  118A  2189  120A  118A  	fcall	___bmul
  1704     05E8  1283               	bcf	3,5	;RP0=0, select bank0
  1705     05E9  1303               	bcf	3,6	;RP1=0, select bank0
  1706     05EA  0725               	addwf	Write_RTC@sec_units,w
  1707     05EB  120A  118A  2218  120A  118A  	fcall	_DEC_to_BCD
  1708     05F0  1283               	bcf	3,5	;RP0=0, select bank0
  1709     05F1  1303               	bcf	3,6	;RP1=0, select bank0
  1710     05F2  00B2               	movwf	Write_RTC@sec
  1711     05F3                     l1448:
  1712                           
  1713                           ;main.c: 156:     RTC_Set_Time(sec, min, hour, dia_semana, dia, mes, ano);
  1714     05F3  0831               	movf	Write_RTC@min,w
  1715     05F4  00F1               	movwf	RTC_Set_Time@minute
  1716     05F5  0830               	movf	Write_RTC@hour,w
  1717     05F6  00F2               	movwf	RTC_Set_Time@hour
  1718     05F7  082C               	movf	Write_RTC@dia_semana,w
  1719     05F8  00F3               	movwf	RTC_Set_Time@dayweek
  1720     05F9  082D               	movf	Write_RTC@dia,w
  1721     05FA  00F4               	movwf	RTC_Set_Time@day
  1722     05FB  082E               	movf	Write_RTC@mes,w
  1723     05FC  00F5               	movwf	RTC_Set_Time@month
  1724     05FD  082F               	movf	Write_RTC@ano,w
  1725     05FE  00F6               	movwf	RTC_Set_Time@year
  1726     05FF  0832               	movf	Write_RTC@sec,w
  1727     0600  120A  118A  2286  120A  118A  	fcall	_RTC_Set_Time
  1728                           
  1729                           ;main.c: 158:     UART_Write_Text_ln("Relogio configurado");
  1730     0605  305B               	movlw	low (STR_22| (0+32768))
  1731     0606  00F8               	movwf	UART_Write_Text_ln@text
  1732     0607  3088               	movlw	high (STR_22| (0+32768))
  1733     0608  00F9               	movwf	UART_Write_Text_ln@text+1
  1734     0609  120A  118A  219E  120A  118A  	fcall	_UART_Write_Text_ln
  1735     060E                     l192:
  1736     060E  0008               	return
  1737     060F                     __end_of_Write_RTC:
  1738                           
  1739                           	psect	text2
  1740     019E                     __ptext2:	
  1741 ;; *************** function _UART_Write_Text_ln *****************
  1742 ;; Defined at:
  1743 ;;		line 36 in file "EUSART.c"
  1744 ;; Parameters:    Size  Location     Type
  1745 ;;  text            2    8[COMMON] PTR const unsigned char 
  1746 ;;		 -> STR_22(20), STR_21(21), STR_20(20), STR_19(16), 
  1747 ;;		 -> STR_18(12), STR_17(17), STR_16(18), STR_15(18), 
  1748 ;;		 -> STR_14(17), STR_13(19), STR_12(12), STR_11(50), 
  1749 ;;		 -> STR_10(15), STR_9(15), STR_8(15), 
  1750 ;; Auto vars:     Size  Location     Type
  1751 ;;		None
  1752 ;; Return value:  Size  Location     Type
  1753 ;;                  1    wreg      void 
  1754 ;; Registers used:
  1755 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1756 ;; Tracked objects:
  1757 ;;		On entry : 0/0
  1758 ;;		On exit  : 0/0
  1759 ;;		Unchanged: 0/0
  1760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1761 ;;      Params:         2       0       0       0       0
  1762 ;;      Locals:         0       0       0       0       0
  1763 ;;      Temps:          0       0       0       0       0
  1764 ;;      Totals:         2       0       0       0       0
  1765 ;;Total ram usage:        2 bytes
  1766 ;; Hardware stack levels used: 1
  1767 ;; Hardware stack levels required when called: 2
  1768 ;; This function calls:
  1769 ;;		_UART_Write
  1770 ;;		_UART_Write_Text
  1771 ;; This function is called by:
  1772 ;;		_Write_RTC
  1773 ;; This function uses a non-reentrant model
  1774 ;;
  1775                           
  1776     019E                     _UART_Write_Text_ln:	
  1777                           ;psect for function _UART_Write_Text_ln
  1778                           
  1779     019E                     l1260:	
  1780                           ;incstack = 0
  1781                           ; Regs used in _UART_Write_Text_ln: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1782                           
  1783                           
  1784                           ;EUSART.c: 37:     UART_Write_Text(text);
  1785     019E  0878               	movf	UART_Write_Text_ln@text,w
  1786     019F  00F1               	movwf	UART_Write_Text@text
  1787     01A0  0879               	movf	UART_Write_Text_ln@text+1,w
  1788     01A1  00F2               	movwf	UART_Write_Text@text+1
  1789     01A2  120A  118A  2244  120A  118A  	fcall	_UART_Write_Text
  1790     01A7                     l1262:
  1791                           
  1792                           ;EUSART.c: 38:     UART_Write('\r');
  1793     01A7  300D               	movlw	13
  1794     01A8  120A  118A  213F  120A  118A  	fcall	_UART_Write
  1795     01AD                     l1264:
  1796                           
  1797                           ;EUSART.c: 39:     UART_Write('\n');
  1798     01AD  300A               	movlw	10
  1799     01AE  120A  118A  213F  120A  118A  	fcall	_UART_Write
  1800     01B3                     l87:
  1801     01B3  0008               	return
  1802     01B4                     __end_of_UART_Write_Text_ln:
  1803                           
  1804                           	psect	text3
  1805     011A                     __ptext3:	
  1806 ;; *************** function _UART_Read *****************
  1807 ;; Defined at:
  1808 ;;		line 42 in file "EUSART.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;		None
  1811 ;; Auto vars:     Size  Location     Type
  1812 ;;		None
  1813 ;; Return value:  Size  Location     Type
  1814 ;;                  1    wreg      unsigned char 
  1815 ;; Registers used:
  1816 ;;		wreg
  1817 ;; Tracked objects:
  1818 ;;		On entry : 0/0
  1819 ;;		On exit  : 0/0
  1820 ;;		Unchanged: 0/0
  1821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1822 ;;      Params:         0       0       0       0       0
  1823 ;;      Locals:         0       0       0       0       0
  1824 ;;      Temps:          0       0       0       0       0
  1825 ;;      Totals:         0       0       0       0       0
  1826 ;;Total ram usage:        0 bytes
  1827 ;; Hardware stack levels used: 1
  1828 ;; This function calls:
  1829 ;;		Nothing
  1830 ;; This function is called by:
  1831 ;;		_main
  1832 ;;		_Write_RTC
  1833 ;;		_UART_Read_Text
  1834 ;; This function uses a non-reentrant model
  1835 ;;
  1836                           
  1837     011A                     _UART_Read:	
  1838                           ;psect for function _UART_Read
  1839                           
  1840     011A                     l1266:	
  1841                           ;incstack = 0
  1842                           ; Regs used in _UART_Read: [wreg]
  1843                           
  1844     011A                     l90:	
  1845                           ;EUSART.c: 43:     while(!RCIF);
  1846                           
  1847     011A  1283               	bcf	3,5	;RP0=0, select bank0
  1848     011B  1303               	bcf	3,6	;RP1=0, select bank0
  1849     011C  1E8C               	btfss	12,5	;volatile
  1850     011D  291F               	goto	u591
  1851     011E  2920               	goto	u590
  1852     011F                     u591:
  1853     011F  291A               	goto	l90
  1854     0120                     u590:
  1855     0120                     l1268:
  1856                           
  1857                           ;EUSART.c: 44:     return RCREG;
  1858     0120  081A               	movf	26,w	;volatile
  1859     0121                     l93:
  1860     0121  0008               	return
  1861     0122                     __end_of_UART_Read:
  1862                           
  1863                           	psect	text4
  1864     0286                     __ptext4:	
  1865 ;; *************** function _RTC_Set_Time *****************
  1866 ;; Defined at:
  1867 ;;		line 19 in file "DS1307.c"
  1868 ;; Parameters:    Size  Location     Type
  1869 ;;  second          1    wreg     unsigned char 
  1870 ;;  minute          1    1[COMMON] unsigned char 
  1871 ;;  hour            1    2[COMMON] unsigned char 
  1872 ;;  dayweek         1    3[COMMON] unsigned char 
  1873 ;;  day             1    4[COMMON] unsigned char 
  1874 ;;  month           1    5[COMMON] unsigned char 
  1875 ;;  year            1    6[COMMON] unsigned char 
  1876 ;; Auto vars:     Size  Location     Type
  1877 ;;  second          1    7[COMMON] unsigned char 
  1878 ;; Return value:  Size  Location     Type
  1879 ;;                  1    wreg      void 
  1880 ;; Registers used:
  1881 ;;		wreg, status,2, status,0, pclath, cstack
  1882 ;; Tracked objects:
  1883 ;;		On entry : 0/0
  1884 ;;		On exit  : 0/0
  1885 ;;		Unchanged: 0/0
  1886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1887 ;;      Params:         6       0       0       0       0
  1888 ;;      Locals:         1       0       0       0       0
  1889 ;;      Temps:          0       0       0       0       0
  1890 ;;      Totals:         7       0       0       0       0
  1891 ;;Total ram usage:        7 bytes
  1892 ;; Hardware stack levels used: 1
  1893 ;; Hardware stack levels required when called: 2
  1894 ;; This function calls:
  1895 ;;		_I2C_Start
  1896 ;;		_I2C_Stop
  1897 ;;		_I2C_Write
  1898 ;; This function is called by:
  1899 ;;		_Write_RTC
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903     0286                     _RTC_Set_Time:	
  1904                           ;psect for function _RTC_Set_Time
  1905                           
  1906                           
  1907                           ;incstack = 0
  1908                           ; Regs used in _RTC_Set_Time: [wreg+status,2+status,0+pclath+cstack]
  1909                           ;RTC_Set_Time@second stored from wreg
  1910     0286  00F7               	movwf	RTC_Set_Time@second
  1911     0287                     l1272:
  1912                           
  1913                           ;DS1307.c: 19: void RTC_Set_Time(unsigned char second, unsigned char minute, unsigned ch
      +                          ar hour,;DS1307.c: 20:         unsigned char dayweek, unsigned char day, unsigned char m
      +                          onth,;DS1307.c: 21:         unsigned char year){;DS1307.c: 22:     I2C_Start();
  1914     0287  120A  118A  2122  120A  118A  	fcall	_I2C_Start
  1915                           
  1916                           ;DS1307.c: 24:     I2C_Write(0xD0);
  1917     028C  30D0               	movlw	208
  1918     028D  120A  118A  2134  120A  118A  	fcall	_I2C_Write
  1919                           
  1920                           ;DS1307.c: 25:     I2C_Write(0x00);
  1921     0292  3000               	movlw	0
  1922     0293  120A  118A  2134  120A  118A  	fcall	_I2C_Write
  1923                           
  1924                           ;DS1307.c: 27:     I2C_Write(second & 0x7F);
  1925     0298  0877               	movf	RTC_Set_Time@second,w
  1926     0299  397F               	andlw	127
  1927     029A  120A  118A  2134  120A  118A  	fcall	_I2C_Write
  1928                           
  1929                           ;DS1307.c: 28:     I2C_Write(minute);
  1930     029F  0871               	movf	RTC_Set_Time@minute,w
  1931     02A0  120A  118A  2134  120A  118A  	fcall	_I2C_Write
  1932                           
  1933                           ;DS1307.c: 29:     I2C_Write(hour);
  1934     02A5  0872               	movf	RTC_Set_Time@hour,w
  1935     02A6  120A  118A  2134  120A  118A  	fcall	_I2C_Write
  1936                           
  1937                           ;DS1307.c: 30:     I2C_Write(dayweek);
  1938     02AB  0873               	movf	RTC_Set_Time@dayweek,w
  1939     02AC  120A  118A  2134  120A  118A  	fcall	_I2C_Write
  1940                           
  1941                           ;DS1307.c: 31:     I2C_Write(day);
  1942     02B1  0874               	movf	RTC_Set_Time@day,w
  1943     02B2  120A  118A  2134  120A  118A  	fcall	_I2C_Write
  1944                           
  1945                           ;DS1307.c: 32:     I2C_Write(month);
  1946     02B7  0875               	movf	RTC_Set_Time@month,w
  1947     02B8  120A  118A  2134  120A  118A  	fcall	_I2C_Write
  1948                           
  1949                           ;DS1307.c: 33:     I2C_Write(year);
  1950     02BD  0876               	movf	RTC_Set_Time@year,w
  1951     02BE  120A  118A  2134  120A  118A  	fcall	_I2C_Write
  1952                           
  1953                           ;DS1307.c: 35:     I2C_Stop();
  1954     02C3  120A  118A  212B  120A  118A  	fcall	_I2C_Stop
  1955     02C8                     l114:
  1956     02C8  0008               	return
  1957     02C9                     __end_of_RTC_Set_Time:
  1958                           
  1959                           	psect	text5
  1960     0218                     __ptext5:	
  1961 ;; *************** function _DEC_to_BCD *****************
  1962 ;; Defined at:
  1963 ;;		line 9 in file "converter.c"
  1964 ;; Parameters:    Size  Location     Type
  1965 ;;  dec             1    wreg     unsigned char 
  1966 ;; Auto vars:     Size  Location     Type
  1967 ;;  dec             1   13[COMMON] unsigned char 
  1968 ;; Return value:  Size  Location     Type
  1969 ;;                  1    wreg      unsigned char 
  1970 ;; Registers used:
  1971 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1972 ;; Tracked objects:
  1973 ;;		On entry : 0/0
  1974 ;;		On exit  : 0/0
  1975 ;;		Unchanged: 0/0
  1976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1977 ;;      Params:         0       0       0       0       0
  1978 ;;      Locals:         1       0       0       0       0
  1979 ;;      Temps:          5       0       0       0       0
  1980 ;;      Totals:         6       0       0       0       0
  1981 ;;Total ram usage:        6 bytes
  1982 ;; Hardware stack levels used: 1
  1983 ;; Hardware stack levels required when called: 1
  1984 ;; This function calls:
  1985 ;;		___awdiv
  1986 ;;		___awmod
  1987 ;; This function is called by:
  1988 ;;		_Write_RTC
  1989 ;; This function uses a non-reentrant model
  1990 ;;
  1991                           
  1992     0218                     _DEC_to_BCD:	
  1993                           ;psect for function _DEC_to_BCD
  1994                           
  1995                           
  1996                           ;incstack = 0
  1997                           ; Regs used in _DEC_to_BCD: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1998                           ;DEC_to_BCD@dec stored from wreg
  1999     0218  00FD               	movwf	DEC_to_BCD@dec
  2000     0219                     l1296:
  2001                           
  2002                           ;converter.c: 10:     return ((dec / 10 * 16) + (dec % 10));
  2003     0219  300A               	movlw	10
  2004     021A  00F0               	movwf	___awdiv@divisor
  2005     021B  3000               	movlw	0
  2006     021C  00F1               	movwf	___awdiv@divisor+1
  2007     021D  087D               	movf	DEC_to_BCD@dec,w
  2008     021E  00F8               	movwf	??_DEC_to_BCD
  2009     021F  01F9               	clrf	??_DEC_to_BCD+1
  2010     0220  0878               	movf	??_DEC_to_BCD,w
  2011     0221  00F2               	movwf	___awdiv@dividend
  2012     0222  0879               	movf	??_DEC_to_BCD+1,w
  2013     0223  00F3               	movwf	___awdiv@dividend+1
  2014     0224  120A  118A  2371  120A  118A  	fcall	___awdiv
  2015     0229  0870               	movf	?___awdiv,w
  2016     022A  00FA               	movwf	??_DEC_to_BCD+2
  2017     022B  3004               	movlw	4
  2018     022C                     u605:
  2019     022C  1003               	clrc
  2020     022D  0DFA               	rlf	??_DEC_to_BCD+2,f
  2021     022E  3EFF               	addlw	-1
  2022     022F  1D03               	skipz
  2023     0230  2A2C               	goto	u605
  2024     0231  300A               	movlw	10
  2025     0232  00F0               	movwf	___awmod@divisor
  2026     0233  3000               	movlw	0
  2027     0234  00F1               	movwf	___awmod@divisor+1
  2028     0235  087D               	movf	DEC_to_BCD@dec,w
  2029     0236  00FB               	movwf	??_DEC_to_BCD+3
  2030     0237  01FC               	clrf	??_DEC_to_BCD+4
  2031     0238  087B               	movf	??_DEC_to_BCD+3,w
  2032     0239  00F2               	movwf	___awmod@dividend
  2033     023A  087C               	movf	??_DEC_to_BCD+4,w
  2034     023B  00F3               	movwf	___awmod@dividend+1
  2035     023C  120A  118A  2318  120A  118A  	fcall	___awmod
  2036     0241  0870               	movf	?___awmod,w
  2037     0242  077A               	addwf	??_DEC_to_BCD+2,w
  2038     0243                     l123:
  2039     0243  0008               	return
  2040     0244                     __end_of_DEC_to_BCD:
  2041                           
  2042                           	psect	text6
  2043     0318                     __ptext6:	
  2044 ;; *************** function ___awmod *****************
  2045 ;; Defined at:
  2046 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
  2047 ;; Parameters:    Size  Location     Type
  2048 ;;  divisor         2    0[COMMON] int 
  2049 ;;  dividend        2    2[COMMON] int 
  2050 ;; Auto vars:     Size  Location     Type
  2051 ;;  sign            1    5[COMMON] unsigned char 
  2052 ;;  counter         1    4[COMMON] unsigned char 
  2053 ;; Return value:  Size  Location     Type
  2054 ;;                  2    0[COMMON] int 
  2055 ;; Registers used:
  2056 ;;		wreg, status,2, status,0, btemp+1
  2057 ;; Tracked objects:
  2058 ;;		On entry : 0/0
  2059 ;;		On exit  : 0/0
  2060 ;;		Unchanged: 0/0
  2061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2062 ;;      Params:         4       0       0       0       0
  2063 ;;      Locals:         2       0       0       0       0
  2064 ;;      Temps:          0       0       0       0       0
  2065 ;;      Totals:         6       0       0       0       0
  2066 ;;Total ram usage:        6 bytes
  2067 ;; Hardware stack levels used: 1
  2068 ;; This function calls:
  2069 ;;		Nothing
  2070 ;; This function is called by:
  2071 ;;		_DEC_to_BCD
  2072 ;; This function uses a non-reentrant model
  2073 ;;
  2074                           
  2075     0318                     ___awmod:	
  2076                           ;psect for function ___awmod
  2077                           
  2078     0318                     l1222:	
  2079                           ;incstack = 0
  2080                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
  2081                           
  2082     0318  01F5               	clrf	___awmod@sign
  2083     0319                     l1224:
  2084     0319  1FF3               	btfss	___awmod@dividend+1,7
  2085     031A  2B1C               	goto	u501
  2086     031B  2B1D               	goto	u500
  2087     031C                     u501:
  2088     031C  2B24               	goto	l1230
  2089     031D                     u500:
  2090     031D                     l1226:
  2091     031D  09F2               	comf	___awmod@dividend,f
  2092     031E  09F3               	comf	___awmod@dividend+1,f
  2093     031F  0AF2               	incf	___awmod@dividend,f
  2094     0320  1903               	skipnz
  2095     0321  0AF3               	incf	___awmod@dividend+1,f
  2096     0322                     l1228:
  2097     0322  01F5               	clrf	___awmod@sign
  2098     0323  0AF5               	incf	___awmod@sign,f
  2099     0324                     l1230:
  2100     0324  1FF1               	btfss	___awmod@divisor+1,7
  2101     0325  2B27               	goto	u511
  2102     0326  2B28               	goto	u510
  2103     0327                     u511:
  2104     0327  2B2D               	goto	l1234
  2105     0328                     u510:
  2106     0328                     l1232:
  2107     0328  09F0               	comf	___awmod@divisor,f
  2108     0329  09F1               	comf	___awmod@divisor+1,f
  2109     032A  0AF0               	incf	___awmod@divisor,f
  2110     032B  1903               	skipnz
  2111     032C  0AF1               	incf	___awmod@divisor+1,f
  2112     032D                     l1234:
  2113     032D  0870               	movf	___awmod@divisor,w
  2114     032E  0471               	iorwf	___awmod@divisor+1,w
  2115     032F  1903               	btfsc	3,2
  2116     0330  2B32               	goto	u521
  2117     0331  2B33               	goto	u520
  2118     0332                     u521:
  2119     0332  2B62               	goto	l1252
  2120     0333                     u520:
  2121     0333                     l1236:
  2122     0333  01F4               	clrf	___awmod@counter
  2123     0334  0AF4               	incf	___awmod@counter,f
  2124     0335  2B41               	goto	l1242
  2125     0336                     l1238:
  2126     0336  3001               	movlw	1
  2127     0337                     u535:
  2128     0337  1003               	clrc
  2129     0338  0DF0               	rlf	___awmod@divisor,f
  2130     0339  0DF1               	rlf	___awmod@divisor+1,f
  2131     033A  3EFF               	addlw	-1
  2132     033B  1D03               	skipz
  2133     033C  2B37               	goto	u535
  2134     033D                     l1240:
  2135     033D  3001               	movlw	1
  2136     033E  00FF               	movwf	btemp+1
  2137     033F  087F               	movf	btemp+1,w
  2138     0340  07F4               	addwf	___awmod@counter,f
  2139     0341                     l1242:
  2140     0341  1FF1               	btfss	___awmod@divisor+1,7
  2141     0342  2B44               	goto	u541
  2142     0343  2B45               	goto	u540
  2143     0344                     u541:
  2144     0344  2B36               	goto	l1238
  2145     0345                     u540:
  2146     0345                     l1244:
  2147     0345  0871               	movf	___awmod@divisor+1,w
  2148     0346  0273               	subwf	___awmod@dividend+1,w
  2149     0347  1D03               	skipz
  2150     0348  2B4B               	goto	u555
  2151     0349  0870               	movf	___awmod@divisor,w
  2152     034A  0272               	subwf	___awmod@dividend,w
  2153     034B                     u555:
  2154     034B  1C03               	skipc
  2155     034C  2B4E               	goto	u551
  2156     034D  2B4F               	goto	u550
  2157     034E                     u551:
  2158     034E  2B55               	goto	l1248
  2159     034F                     u550:
  2160     034F                     l1246:
  2161     034F  0870               	movf	___awmod@divisor,w
  2162     0350  02F2               	subwf	___awmod@dividend,f
  2163     0351  0871               	movf	___awmod@divisor+1,w
  2164     0352  1C03               	skipc
  2165     0353  03F3               	decf	___awmod@dividend+1,f
  2166     0354  02F3               	subwf	___awmod@dividend+1,f
  2167     0355                     l1248:
  2168     0355  3001               	movlw	1
  2169     0356                     u565:
  2170     0356  1003               	clrc
  2171     0357  0CF1               	rrf	___awmod@divisor+1,f
  2172     0358  0CF0               	rrf	___awmod@divisor,f
  2173     0359  3EFF               	addlw	-1
  2174     035A  1D03               	skipz
  2175     035B  2B56               	goto	u565
  2176     035C                     l1250:
  2177     035C  3001               	movlw	1
  2178     035D  02F4               	subwf	___awmod@counter,f
  2179     035E  1D03               	btfss	3,2
  2180     035F  2B61               	goto	u571
  2181     0360  2B62               	goto	u570
  2182     0361                     u571:
  2183     0361  2B45               	goto	l1244
  2184     0362                     u570:
  2185     0362                     l1252:
  2186     0362  0875               	movf	___awmod@sign,w
  2187     0363  1903               	btfsc	3,2
  2188     0364  2B66               	goto	u581
  2189     0365  2B67               	goto	u580
  2190     0366                     u581:
  2191     0366  2B6C               	goto	l1256
  2192     0367                     u580:
  2193     0367                     l1254:
  2194     0367  09F2               	comf	___awmod@dividend,f
  2195     0368  09F3               	comf	___awmod@dividend+1,f
  2196     0369  0AF2               	incf	___awmod@dividend,f
  2197     036A  1903               	skipnz
  2198     036B  0AF3               	incf	___awmod@dividend+1,f
  2199     036C                     l1256:
  2200     036C  0873               	movf	___awmod@dividend+1,w
  2201     036D  00F1               	movwf	?___awmod+1
  2202     036E  0872               	movf	___awmod@dividend,w
  2203     036F  00F0               	movwf	?___awmod
  2204     0370                     l444:
  2205     0370  0008               	return
  2206     0371                     __end_of___awmod:
  2207                           
  2208                           	psect	text7
  2209     0116                     __ptext7:	
  2210 ;; *************** function _ASCII_to_DEC *****************
  2211 ;; Defined at:
  2212 ;;		line 17 in file "converter.c"
  2213 ;; Parameters:    Size  Location     Type
  2214 ;;  dec             1    wreg     unsigned char 
  2215 ;; Auto vars:     Size  Location     Type
  2216 ;;  dec             1    0[COMMON] unsigned char 
  2217 ;; Return value:  Size  Location     Type
  2218 ;;                  1    wreg      unsigned char 
  2219 ;; Registers used:
  2220 ;;		wreg, status,2, status,0
  2221 ;; Tracked objects:
  2222 ;;		On entry : 0/0
  2223 ;;		On exit  : 0/0
  2224 ;;		Unchanged: 0/0
  2225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2226 ;;      Params:         0       0       0       0       0
  2227 ;;      Locals:         1       0       0       0       0
  2228 ;;      Temps:          0       0       0       0       0
  2229 ;;      Totals:         1       0       0       0       0
  2230 ;;Total ram usage:        1 bytes
  2231 ;; Hardware stack levels used: 1
  2232 ;; This function calls:
  2233 ;;		Nothing
  2234 ;; This function is called by:
  2235 ;;		_Write_RTC
  2236 ;; This function uses a non-reentrant model
  2237 ;;
  2238                           
  2239     0116                     _ASCII_to_DEC:	
  2240                           ;psect for function _ASCII_to_DEC
  2241                           
  2242                           
  2243                           ;incstack = 0
  2244                           ; Regs used in _ASCII_to_DEC: [wreg+status,2+status,0]
  2245                           ;ASCII_to_DEC@dec stored from wreg
  2246     0116  00F0               	movwf	ASCII_to_DEC@dec
  2247     0117                     l1304:
  2248                           
  2249                           ;converter.c: 18:     return dec - 0x30;
  2250     0117  0870               	movf	ASCII_to_DEC@dec,w
  2251     0118  3ED0               	addlw	208
  2252     0119                     l129:
  2253     0119  0008               	return
  2254     011A                     __end_of_ASCII_to_DEC:
  2255                           
  2256                           	psect	text8
  2257     0176                     __ptext8:	
  2258 ;; *************** function _UART_Init *****************
  2259 ;; Defined at:
  2260 ;;		line 5 in file "EUSART.c"
  2261 ;; Parameters:    Size  Location     Type
  2262 ;;		None
  2263 ;; Auto vars:     Size  Location     Type
  2264 ;;		None
  2265 ;; Return value:  Size  Location     Type
  2266 ;;                  1    wreg      void 
  2267 ;; Registers used:
  2268 ;;		wreg
  2269 ;; Tracked objects:
  2270 ;;		On entry : 0/0
  2271 ;;		On exit  : 0/0
  2272 ;;		Unchanged: 0/0
  2273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2274 ;;      Params:         0       0       0       0       0
  2275 ;;      Locals:         0       0       0       0       0
  2276 ;;      Temps:          0       0       0       0       0
  2277 ;;      Totals:         0       0       0       0       0
  2278 ;;Total ram usage:        0 bytes
  2279 ;; Hardware stack levels used: 1
  2280 ;; This function calls:
  2281 ;;		Nothing
  2282 ;; This function is called by:
  2283 ;;		_main
  2284 ;; This function uses a non-reentrant model
  2285 ;;
  2286                           
  2287     0176                     _UART_Init:	
  2288                           ;psect for function _UART_Init
  2289                           
  2290     0176                     l1316:	
  2291                           ;incstack = 0
  2292                           ; Regs used in _UART_Init: [wreg]
  2293                           
  2294                           
  2295                           ;EUSART.c: 6:     TRISCbits.TRISC7 = 0x01;
  2296     0176  1683               	bsf	3,5	;RP0=1, select bank1
  2297     0177  1303               	bcf	3,6	;RP1=0, select bank1
  2298     0178  1787               	bsf	7,7	;volatile
  2299                           
  2300                           ;EUSART.c: 7:     TRISCbits.TRISC6 = 0x00;
  2301     0179  1307               	bcf	7,6	;volatile
  2302                           
  2303                           ;EUSART.c: 8:     PORTCbits.RC7 = 0x00;
  2304     017A  1283               	bcf	3,5	;RP0=0, select bank0
  2305     017B  1303               	bcf	3,6	;RP1=0, select bank0
  2306     017C  1387               	bcf	7,7	;volatile
  2307                           
  2308                           ;EUSART.c: 9:     PORTCbits.RC6 = 0x00;
  2309     017D  1307               	bcf	7,6	;volatile
  2310     017E                     l1318:
  2311                           
  2312                           ;EUSART.c: 11:     SPBRG = 31;
  2313     017E  301F               	movlw	31
  2314     017F  1683               	bsf	3,5	;RP0=1, select bank1
  2315     0180  1303               	bcf	3,6	;RP1=0, select bank1
  2316     0181  0099               	movwf	25	;volatile
  2317     0182                     l1320:
  2318                           
  2319                           ;EUSART.c: 12:     TXSTAbits.SYNC = 0;
  2320     0182  1218               	bcf	24,4	;volatile
  2321     0183                     l1322:
  2322                           
  2323                           ;EUSART.c: 13:     TXSTAbits.TXEN = 1;
  2324     0183  1698               	bsf	24,5	;volatile
  2325     0184                     l1324:
  2326                           
  2327                           ;EUSART.c: 14:     RCSTAbits.SPEN = 1;
  2328     0184  1283               	bcf	3,5	;RP0=0, select bank0
  2329     0185  1303               	bcf	3,6	;RP1=0, select bank0
  2330     0186  1798               	bsf	24,7	;volatile
  2331     0187                     l1326:
  2332                           
  2333                           ;EUSART.c: 15:     RCSTAbits.CREN = 1;
  2334     0187  1618               	bsf	24,4	;volatile
  2335     0188                     l69:
  2336     0188  0008               	return
  2337     0189                     __end_of_UART_Init:
  2338                           
  2339                           	psect	text9
  2340     01EE                     __ptext9:	
  2341 ;; *************** function _RTC_Init *****************
  2342 ;; Defined at:
  2343 ;;		line 7 in file "DS1307.c"
  2344 ;; Parameters:    Size  Location     Type
  2345 ;;		None
  2346 ;; Auto vars:     Size  Location     Type
  2347 ;;		None
  2348 ;; Return value:  Size  Location     Type
  2349 ;;                  1    wreg      void 
  2350 ;; Registers used:
  2351 ;;		wreg, status,2, status,0, pclath, cstack
  2352 ;; Tracked objects:
  2353 ;;		On entry : 0/0
  2354 ;;		On exit  : 0/0
  2355 ;;		Unchanged: 0/0
  2356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2357 ;;      Params:         0       0       0       0       0
  2358 ;;      Locals:         0       0       0       0       0
  2359 ;;      Temps:          3       0       0       0       0
  2360 ;;      Totals:         3       0       0       0       0
  2361 ;;Total ram usage:        3 bytes
  2362 ;; Hardware stack levels used: 1
  2363 ;; Hardware stack levels required when called: 2
  2364 ;; This function calls:
  2365 ;;		_I2C_Start
  2366 ;;		_I2C_Stop
  2367 ;;		_I2C_Write
  2368 ;; This function is called by:
  2369 ;;		_main
  2370 ;; This function uses a non-reentrant model
  2371 ;;
  2372                           
  2373     01EE                     _RTC_Init:	
  2374                           ;psect for function _RTC_Init
  2375                           
  2376     01EE                     l1328:	
  2377                           ;incstack = 0
  2378                           ; Regs used in _RTC_Init: [wreg+status,2+status,0+pclath+cstack]
  2379                           
  2380                           
  2381                           ;DS1307.c: 8:     I2C_Start();
  2382     01EE  120A  118A  2122  120A  118A  	fcall	_I2C_Start
  2383                           
  2384                           ;DS1307.c: 10:     I2C_Write(0xD0);
  2385     01F3  30D0               	movlw	208
  2386     01F4  120A  118A  2134  120A  118A  	fcall	_I2C_Write
  2387                           
  2388                           ;DS1307.c: 11:     I2C_Write(0x07);
  2389     01F9  3007               	movlw	7
  2390     01FA  120A  118A  2134  120A  118A  	fcall	_I2C_Write
  2391                           
  2392                           ;DS1307.c: 12:     I2C_Write(0x10);
  2393     01FF  3010               	movlw	16
  2394     0200  120A  118A  2134  120A  118A  	fcall	_I2C_Write
  2395                           
  2396                           ;DS1307.c: 14:     I2C_Stop();
  2397     0205  120A  118A  212B  120A  118A  	fcall	_I2C_Stop
  2398     020A                     l1330:
  2399                           
  2400                           ;DS1307.c: 16:     _delay((unsigned long)((50)*(20000000/4000.0)));
  2401     020A  3002               	movlw	2
  2402     020B  00F3               	movwf	??_RTC_Init+2
  2403     020C  3045               	movlw	69
  2404     020D  00F2               	movwf	??_RTC_Init+1
  2405     020E  30A9               	movlw	169
  2406     020F  00F1               	movwf	??_RTC_Init
  2407     0210                     u657:
  2408     0210  0BF1               	decfsz	??_RTC_Init,f
  2409     0211  2A10               	goto	u657
  2410     0212  0BF2               	decfsz	??_RTC_Init+1,f
  2411     0213  2A10               	goto	u657
  2412     0214  0BF3               	decfsz	??_RTC_Init+2,f
  2413     0215  2A10               	goto	u657
  2414     0216  2A17               	nop2
  2415     0217                     l111:
  2416     0217  0008               	return
  2417     0218                     __end_of_RTC_Init:
  2418                           
  2419                           	psect	text10
  2420     0167                     __ptext10:	
  2421 ;; *************** function _I2C_Init *****************
  2422 ;; Defined at:
  2423 ;;		line 6 in file "I2C.c"
  2424 ;; Parameters:    Size  Location     Type
  2425 ;;		None
  2426 ;; Auto vars:     Size  Location     Type
  2427 ;;		None
  2428 ;; Return value:  Size  Location     Type
  2429 ;;                  1    wreg      void 
  2430 ;; Registers used:
  2431 ;;		wreg, status,2
  2432 ;; Tracked objects:
  2433 ;;		On entry : 0/0
  2434 ;;		On exit  : 0/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2437 ;;      Params:         0       0       0       0       0
  2438 ;;      Locals:         0       0       0       0       0
  2439 ;;      Temps:          0       0       0       0       0
  2440 ;;      Totals:         0       0       0       0       0
  2441 ;;Total ram usage:        0 bytes
  2442 ;; Hardware stack levels used: 1
  2443 ;; This function calls:
  2444 ;;		Nothing
  2445 ;; This function is called by:
  2446 ;;		_main
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450     0167                     _I2C_Init:	
  2451                           ;psect for function _I2C_Init
  2452                           
  2453     0167                     l1308:	
  2454                           ;incstack = 0
  2455                           ; Regs used in _I2C_Init: [wreg+status,2]
  2456                           
  2457                           
  2458                           ;I2C.c: 7:     TRISCbits.TRISC3 = 0x01;
  2459     0167  1683               	bsf	3,5	;RP0=1, select bank1
  2460     0168  1303               	bcf	3,6	;RP1=0, select bank1
  2461     0169  1587               	bsf	7,3	;volatile
  2462                           
  2463                           ;I2C.c: 8:     TRISCbits.TRISC4 = 0x01;
  2464     016A  1607               	bsf	7,4	;volatile
  2465     016B                     l1310:
  2466                           
  2467                           ;I2C.c: 9:     SSPCON = 0b00101000;
  2468     016B  3028               	movlw	40
  2469     016C  1283               	bcf	3,5	;RP0=0, select bank0
  2470     016D  1303               	bcf	3,6	;RP1=0, select bank0
  2471     016E  0094               	movwf	20	;volatile
  2472     016F                     l1312:
  2473                           
  2474                           ;I2C.c: 10:     SSPCON2 = 0b00000000;
  2475     016F  1683               	bsf	3,5	;RP0=1, select bank1
  2476     0170  1303               	bcf	3,6	;RP1=0, select bank1
  2477     0171  0191               	clrf	17	;volatile
  2478     0172                     l1314:
  2479                           
  2480                           ;I2C.c: 11:     SSPADD = (20000000 / (4 * 100000)) - 1;
  2481     0172  3031               	movlw	49
  2482     0173  0093               	movwf	19	;volatile
  2483                           
  2484                           ;I2C.c: 12:     SSPSTAT = 0b00000000;
  2485     0174  0194               	clrf	20	;volatile
  2486     0175                     l21:
  2487     0175  0008               	return
  2488     0176                     __end_of_I2C_Init:
  2489                           
  2490                           	psect	text11
  2491     060F                     __ptext11:	
  2492 ;; *************** function _Get_RTC *****************
  2493 ;; Defined at:
  2494 ;;		line 44 in file "main.c"
  2495 ;; Parameters:    Size  Location     Type
  2496 ;;		None
  2497 ;; Auto vars:     Size  Location     Type
  2498 ;;  RC_Year         1    9[BANK0 ] unsigned char 
  2499 ;;  RC_Month        1    8[BANK0 ] unsigned char 
  2500 ;;  RC_Day          1    7[BANK0 ] unsigned char 
  2501 ;;  RC_Hour         1    6[BANK0 ] unsigned char 
  2502 ;;  RC_Minuts       1    5[BANK0 ] unsigned char 
  2503 ;;  RC_Seconds      1    4[BANK0 ] unsigned char 
  2504 ;;  RC_Dayweek      1    3[BANK0 ] unsigned char 
  2505 ;; Return value:  Size  Location     Type
  2506 ;;                  1    wreg      void 
  2507 ;; Registers used:
  2508 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2514 ;;      Params:         0       0       0       0       0
  2515 ;;      Locals:         0       7       0       0       0
  2516 ;;      Temps:          0       2       0       0       0
  2517 ;;      Totals:         0       9       0       0       0
  2518 ;;Total ram usage:        9 bytes
  2519 ;; Hardware stack levels used: 1
  2520 ;; Hardware stack levels required when called: 4
  2521 ;; This function calls:
  2522 ;;		_BCD_to_DEC
  2523 ;;		_DEC_to_ASCII
  2524 ;;		_RTC_Get_Time
  2525 ;;		_UART_Write
  2526 ;;		_UART_Write_Text
  2527 ;;		___awdiv
  2528 ;; This function is called by:
  2529 ;;		_main
  2530 ;; This function uses a non-reentrant model
  2531 ;;
  2532                           
  2533     060F                     _Get_RTC:	
  2534                           ;psect for function _Get_RTC
  2535                           
  2536     060F                     l1332:	
  2537                           ;incstack = 0
  2538                           ; Regs used in _Get_RTC: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2539                           
  2540                           
  2541                           ;main.c: 45:     unsigned char RC_Seconds = 0, RC_Minuts = 0,RC_Hour = 0, RC_Dayweek = 0
      +                          ,
  2542     060F  1283               	bcf	3,5	;RP0=0, select bank0
  2543     0610  1303               	bcf	3,6	;RP1=0, select bank0
  2544     0611  01A4               	clrf	Get_RTC@RC_Seconds
  2545     0612  01A5               	clrf	Get_RTC@RC_Minuts
  2546     0613  01A6               	clrf	Get_RTC@RC_Hour
  2547     0614  01A3               	clrf	Get_RTC@RC_Dayweek
  2548                           
  2549                           ;main.c: 46:             RC_Day = 0, RC_Month = 0, RC_Year = 0;
  2550     0615  01A7               	clrf	Get_RTC@RC_Day
  2551     0616  01A8               	clrf	Get_RTC@RC_Month
  2552     0617  01A9               	clrf	Get_RTC@RC_Year
  2553     0618                     l1334:
  2554                           
  2555                           ;main.c: 48:     RTC_Get_Time(&RC_Seconds, &RC_Minuts, &RC_Hour, &RC_Dayweek, &RC_Day,
  2556     0618  3025               	movlw	(low (Get_RTC@RC_Minuts| 0))& (0+255)
  2557     0619  00F3               	movwf	RTC_Get_Time@minute
  2558     061A  3026               	movlw	(low (Get_RTC@RC_Hour| 0))& (0+255)
  2559     061B  00F4               	movwf	RTC_Get_Time@hour
  2560     061C  3023               	movlw	(low (Get_RTC@RC_Dayweek| 0))& (0+255)
  2561     061D  00F5               	movwf	RTC_Get_Time@dayweek
  2562     061E  3027               	movlw	(low (Get_RTC@RC_Day| 0))& (0+255)
  2563     061F  00F6               	movwf	RTC_Get_Time@day
  2564     0620  3028               	movlw	(low (Get_RTC@RC_Month| 0))& (0+255)
  2565     0621  00F7               	movwf	RTC_Get_Time@month
  2566     0622  3029               	movlw	(low (Get_RTC@RC_Year| 0))& (0+255)
  2567     0623  00F8               	movwf	RTC_Get_Time@year
  2568     0624  3024               	movlw	(low (Get_RTC@RC_Seconds| 0))& (0+255)
  2569     0625  120A  118A  23D8  120A  118A  	fcall	_RTC_Get_Time
  2570     062A                     l1336:
  2571                           
  2572                           ;main.c: 51:     UART_Write('(');
  2573     062A  3028               	movlw	40
  2574     062B  120A  118A  213F  120A  118A  	fcall	_UART_Write
  2575     0630                     l1338:
  2576                           
  2577                           ;main.c: 52:     UART_Write(DEC_to_ASCII(BCD_to_DEC(RC_Day / 16)));
  2578     0630  3010               	movlw	16
  2579     0631  00F0               	movwf	___awdiv@divisor
  2580     0632  3000               	movlw	0
  2581     0633  00F1               	movwf	___awdiv@divisor+1
  2582     0634  1283               	bcf	3,5	;RP0=0, select bank0
  2583     0635  1303               	bcf	3,6	;RP1=0, select bank0
  2584     0636  0827               	movf	Get_RTC@RC_Day,w
  2585     0637  00A1               	movwf	??_Get_RTC
  2586     0638  01A2               	clrf	??_Get_RTC+1
  2587     0639  0821               	movf	??_Get_RTC,w
  2588     063A  00F2               	movwf	___awdiv@dividend
  2589     063B  0822               	movf	??_Get_RTC+1,w
  2590     063C  00F3               	movwf	___awdiv@dividend+1
  2591     063D  120A  118A  2371  120A  118A  	fcall	___awdiv
  2592     0642  0870               	movf	?___awdiv,w
  2593     0643  120A  118A  21CE  120A  118A  	fcall	_BCD_to_DEC
  2594     0648  120A  118A  2112  120A  118A  	fcall	_DEC_to_ASCII
  2595     064D  120A  118A  213F  120A  118A  	fcall	_UART_Write
  2596     0652                     l1340:
  2597                           
  2598                           ;main.c: 53:     UART_Write(DEC_to_ASCII(BCD_to_DEC(RC_Day % 16)));
  2599     0652  1283               	bcf	3,5	;RP0=0, select bank0
  2600     0653  1303               	bcf	3,6	;RP1=0, select bank0
  2601     0654  0827               	movf	Get_RTC@RC_Day,w
  2602     0655  390F               	andlw	15
  2603     0656  120A  118A  21CE  120A  118A  	fcall	_BCD_to_DEC
  2604     065B  120A  118A  2112  120A  118A  	fcall	_DEC_to_ASCII
  2605     0660  120A  118A  213F  120A  118A  	fcall	_UART_Write
  2606     0665                     l1342:
  2607                           
  2608                           ;main.c: 54:     UART_Write('/');
  2609     0665  302F               	movlw	47
  2610     0666  120A  118A  213F  120A  118A  	fcall	_UART_Write
  2611     066B                     l1344:
  2612                           
  2613                           ;main.c: 55:     UART_Write(DEC_to_ASCII(BCD_to_DEC(RC_Month / 16)));
  2614     066B  3010               	movlw	16
  2615     066C  00F0               	movwf	___awdiv@divisor
  2616     066D  3000               	movlw	0
  2617     066E  00F1               	movwf	___awdiv@divisor+1
  2618     066F  1283               	bcf	3,5	;RP0=0, select bank0
  2619     0670  1303               	bcf	3,6	;RP1=0, select bank0
  2620     0671  0828               	movf	Get_RTC@RC_Month,w
  2621     0672  00A1               	movwf	??_Get_RTC
  2622     0673  01A2               	clrf	??_Get_RTC+1
  2623     0674  0821               	movf	??_Get_RTC,w
  2624     0675  00F2               	movwf	___awdiv@dividend
  2625     0676  0822               	movf	??_Get_RTC+1,w
  2626     0677  00F3               	movwf	___awdiv@dividend+1
  2627     0678  120A  118A  2371  120A  118A  	fcall	___awdiv
  2628     067D  0870               	movf	?___awdiv,w
  2629     067E  120A  118A  21CE  120A  118A  	fcall	_BCD_to_DEC
  2630     0683  120A  118A  2112  120A  118A  	fcall	_DEC_to_ASCII
  2631     0688  120A  118A  213F  120A  118A  	fcall	_UART_Write
  2632     068D                     l1346:
  2633                           
  2634                           ;main.c: 56:     UART_Write(DEC_to_ASCII(BCD_to_DEC(RC_Month % 16)));
  2635     068D  1283               	bcf	3,5	;RP0=0, select bank0
  2636     068E  1303               	bcf	3,6	;RP1=0, select bank0
  2637     068F  0828               	movf	Get_RTC@RC_Month,w
  2638     0690  390F               	andlw	15
  2639     0691  120A  118A  21CE  120A  118A  	fcall	_BCD_to_DEC
  2640     0696  120A  118A  2112  120A  118A  	fcall	_DEC_to_ASCII
  2641     069B  120A  118A  213F  120A  118A  	fcall	_UART_Write
  2642     06A0                     l1348:
  2643                           
  2644                           ;main.c: 57:     UART_Write('/');
  2645     06A0  302F               	movlw	47
  2646     06A1  120A  118A  213F  120A  118A  	fcall	_UART_Write
  2647     06A6                     l1350:
  2648                           
  2649                           ;main.c: 58:     UART_Write(DEC_to_ASCII(BCD_to_DEC(RC_Year / 16)));
  2650     06A6  3010               	movlw	16
  2651     06A7  00F0               	movwf	___awdiv@divisor
  2652     06A8  3000               	movlw	0
  2653     06A9  00F1               	movwf	___awdiv@divisor+1
  2654     06AA  1283               	bcf	3,5	;RP0=0, select bank0
  2655     06AB  1303               	bcf	3,6	;RP1=0, select bank0
  2656     06AC  0829               	movf	Get_RTC@RC_Year,w
  2657     06AD  00A1               	movwf	??_Get_RTC
  2658     06AE  01A2               	clrf	??_Get_RTC+1
  2659     06AF  0821               	movf	??_Get_RTC,w
  2660     06B0  00F2               	movwf	___awdiv@dividend
  2661     06B1  0822               	movf	??_Get_RTC+1,w
  2662     06B2  00F3               	movwf	___awdiv@dividend+1
  2663     06B3  120A  118A  2371  120A  118A  	fcall	___awdiv
  2664     06B8  0870               	movf	?___awdiv,w
  2665     06B9  120A  118A  21CE  120A  118A  	fcall	_BCD_to_DEC
  2666     06BE  120A  118A  2112  120A  118A  	fcall	_DEC_to_ASCII
  2667     06C3  120A  118A  213F  120A  118A  	fcall	_UART_Write
  2668     06C8                     l1352:
  2669                           
  2670                           ;main.c: 59:     UART_Write(DEC_to_ASCII(BCD_to_DEC(RC_Year % 16)));
  2671     06C8  1283               	bcf	3,5	;RP0=0, select bank0
  2672     06C9  1303               	bcf	3,6	;RP1=0, select bank0
  2673     06CA  0829               	movf	Get_RTC@RC_Year,w
  2674     06CB  390F               	andlw	15
  2675     06CC  120A  118A  21CE  120A  118A  	fcall	_BCD_to_DEC
  2676     06D1  120A  118A  2112  120A  118A  	fcall	_DEC_to_ASCII
  2677     06D6  120A  118A  213F  120A  118A  	fcall	_UART_Write
  2678     06DB                     l1354:
  2679                           
  2680                           ;main.c: 60:     UART_Write(')');
  2681     06DB  3029               	movlw	41
  2682     06DC  120A  118A  213F  120A  118A  	fcall	_UART_Write
  2683                           
  2684                           ;main.c: 62:     switch(RC_Dayweek){
  2685     06E1  2F28               	goto	l1372
  2686     06E2                     l1356:
  2687                           
  2688                           ;main.c: 64:             UART_Write_Text(" Domingo ");
  2689     06E2  301D               	movlw	low (STR_1| (0+32768))
  2690     06E3  00F1               	movwf	UART_Write_Text@text
  2691     06E4  3089               	movlw	high (STR_1| (0+32768))
  2692     06E5  00F2               	movwf	UART_Write_Text@text+1
  2693     06E6  120A  118A  2244  120A  118A  	fcall	_UART_Write_Text
  2694                           
  2695                           ;main.c: 65:             break;
  2696     06EB  2F41               	goto	l1374
  2697     06EC                     l1358:
  2698                           
  2699                           ;main.c: 67:             UART_Write_Text(" Segunda Feira ");
  2700     06EC  3072               	movlw	low ((STR_13+3)| (0+32768))
  2701     06ED  00F1               	movwf	UART_Write_Text@text
  2702     06EE  3088               	movlw	high ((STR_13+3)| (0+32768))
  2703     06EF  00F2               	movwf	UART_Write_Text@text+1
  2704     06F0  120A  118A  2244  120A  118A  	fcall	_UART_Write_Text
  2705                           
  2706                           ;main.c: 68:             break;
  2707     06F5  2F41               	goto	l1374
  2708     06F6                     l1360:
  2709                           
  2710                           ;main.c: 70:             UART_Write_Text(" Terca Feira ");
  2711     06F6  30A9               	movlw	low ((STR_14+3)| (0+32768))
  2712     06F7  00F1               	movwf	UART_Write_Text@text
  2713     06F8  3088               	movlw	high ((STR_14+3)| (0+32768))
  2714     06F9  00F2               	movwf	UART_Write_Text@text+1
  2715     06FA  120A  118A  2244  120A  118A  	fcall	_UART_Write_Text
  2716                           
  2717                           ;main.c: 71:             break;
  2718     06FF  2F41               	goto	l1374
  2719     0700                     l1362:
  2720                           
  2721                           ;main.c: 73:             UART_Write_Text(" Quarta Feira ");
  2722     0700  3097               	movlw	low ((STR_15+3)| (0+32768))
  2723     0701  00F1               	movwf	UART_Write_Text@text
  2724     0702  3088               	movlw	high ((STR_15+3)| (0+32768))
  2725     0703  00F2               	movwf	UART_Write_Text@text+1
  2726     0704  120A  118A  2244  120A  118A  	fcall	_UART_Write_Text
  2727                           
  2728                           ;main.c: 74:             break;
  2729     0709  2F41               	goto	l1374
  2730     070A                     l1364:
  2731                           
  2732                           ;main.c: 76:             UART_Write_Text(" Quinta Feira ");
  2733     070A  3085               	movlw	low ((STR_16+3)| (0+32768))
  2734     070B  00F1               	movwf	UART_Write_Text@text
  2735     070C  3088               	movlw	high ((STR_16+3)| (0+32768))
  2736     070D  00F2               	movwf	UART_Write_Text@text+1
  2737     070E  120A  118A  2244  120A  118A  	fcall	_UART_Write_Text
  2738                           
  2739                           ;main.c: 77:             break;
  2740     0713  2F41               	goto	l1374
  2741     0714                     l1366:
  2742                           
  2743                           ;main.c: 79:             UART_Write_Text(" Sexta Feira ");
  2744     0714  30BA               	movlw	low ((STR_17+3)| (0+32768))
  2745     0715  00F1               	movwf	UART_Write_Text@text
  2746     0716  3088               	movlw	high ((STR_17+3)| (0+32768))
  2747     0717  00F2               	movwf	UART_Write_Text@text+1
  2748     0718  120A  118A  2244  120A  118A  	fcall	_UART_Write_Text
  2749                           
  2750                           ;main.c: 80:             break;
  2751     071D  2F41               	goto	l1374
  2752     071E                     l1368:
  2753                           
  2754                           ;main.c: 82:             UART_Write_Text(" Sabado ");
  2755     071E  3008               	movlw	low ((STR_18+3)| (0+32768))
  2756     071F  00F1               	movwf	UART_Write_Text@text
  2757     0720  3089               	movlw	high ((STR_18+3)| (0+32768))
  2758     0721  00F2               	movwf	UART_Write_Text@text+1
  2759     0722  120A  118A  2244  120A  118A  	fcall	_UART_Write_Text
  2760                           
  2761                           ;main.c: 83:             break;
  2762     0727  2F41               	goto	l1374
  2763     0728                     l1372:
  2764     0728  1283               	bcf	3,5	;RP0=0, select bank0
  2765     0729  1303               	bcf	3,6	;RP1=0, select bank0
  2766     072A  0823               	movf	Get_RTC@RC_Dayweek,w
  2767                           
  2768                           ; Switch size 1, requested type "simple"
  2769                           ; Number of cases is 7, Range of values is 1 to 7
  2770                           ; switch strategies available:
  2771                           ; Name         Instructions Cycles
  2772                           ; simple_byte           22    12 (average)
  2773                           ; direct_byte           32    11 (fixed)
  2774                           ; jumptable            263     9 (fixed)
  2775                           ;	Chosen strategy is simple_byte
  2776     072B  3A01               	xorlw	1	; case 1
  2777     072C  1903               	skipnz
  2778     072D  2EE2               	goto	l1356
  2779     072E  3A03               	xorlw	3	; case 2
  2780     072F  1903               	skipnz
  2781     0730  2EEC               	goto	l1358
  2782     0731  3A01               	xorlw	1	; case 3
  2783     0732  1903               	skipnz
  2784     0733  2EF6               	goto	l1360
  2785     0734  3A07               	xorlw	7	; case 4
  2786     0735  1903               	skipnz
  2787     0736  2F00               	goto	l1362
  2788     0737  3A01               	xorlw	1	; case 5
  2789     0738  1903               	skipnz
  2790     0739  2F0A               	goto	l1364
  2791     073A  3A03               	xorlw	3	; case 6
  2792     073B  1903               	skipnz
  2793     073C  2F14               	goto	l1366
  2794     073D  3A01               	xorlw	1	; case 7
  2795     073E  1903               	skipnz
  2796     073F  2F1E               	goto	l1368
  2797     0740  2F41               	goto	l1374
  2798     0741                     l1374:
  2799                           
  2800                           ;main.c: 86:     UART_Write(DEC_to_ASCII(BCD_to_DEC(RC_Hour / 16)));
  2801     0741  3010               	movlw	16
  2802     0742  00F0               	movwf	___awdiv@divisor
  2803     0743  3000               	movlw	0
  2804     0744  00F1               	movwf	___awdiv@divisor+1
  2805     0745  1283               	bcf	3,5	;RP0=0, select bank0
  2806     0746  1303               	bcf	3,6	;RP1=0, select bank0
  2807     0747  0826               	movf	Get_RTC@RC_Hour,w
  2808     0748  00A1               	movwf	??_Get_RTC
  2809     0749  01A2               	clrf	??_Get_RTC+1
  2810     074A  0821               	movf	??_Get_RTC,w
  2811     074B  00F2               	movwf	___awdiv@dividend
  2812     074C  0822               	movf	??_Get_RTC+1,w
  2813     074D  00F3               	movwf	___awdiv@dividend+1
  2814     074E  120A  118A  2371  120A  118A  	fcall	___awdiv
  2815     0753  0870               	movf	?___awdiv,w
  2816     0754  120A  118A  21CE  120A  118A  	fcall	_BCD_to_DEC
  2817     0759  120A  118A  2112  120A  118A  	fcall	_DEC_to_ASCII
  2818     075E  120A  118A  213F  120A  118A  	fcall	_UART_Write
  2819                           
  2820                           ;main.c: 87:     UART_Write(DEC_to_ASCII(BCD_to_DEC(RC_Hour % 16)));
  2821     0763  1283               	bcf	3,5	;RP0=0, select bank0
  2822     0764  1303               	bcf	3,6	;RP1=0, select bank0
  2823     0765  0826               	movf	Get_RTC@RC_Hour,w
  2824     0766  390F               	andlw	15
  2825     0767  120A  118A  21CE  120A  118A  	fcall	_BCD_to_DEC
  2826     076C  120A  118A  2112  120A  118A  	fcall	_DEC_to_ASCII
  2827     0771  120A  118A  213F  120A  118A  	fcall	_UART_Write
  2828     0776                     l1376:
  2829                           
  2830                           ;main.c: 88:     UART_Write(':');
  2831     0776  303A               	movlw	58
  2832     0777  120A  118A  213F  120A  118A  	fcall	_UART_Write
  2833     077C                     l1378:
  2834                           
  2835                           ;main.c: 89:     UART_Write(DEC_to_ASCII(BCD_to_DEC(RC_Minuts / 16)));
  2836     077C  3010               	movlw	16
  2837     077D  00F0               	movwf	___awdiv@divisor
  2838     077E  3000               	movlw	0
  2839     077F  00F1               	movwf	___awdiv@divisor+1
  2840     0780  1283               	bcf	3,5	;RP0=0, select bank0
  2841     0781  1303               	bcf	3,6	;RP1=0, select bank0
  2842     0782  0825               	movf	Get_RTC@RC_Minuts,w
  2843     0783  00A1               	movwf	??_Get_RTC
  2844     0784  01A2               	clrf	??_Get_RTC+1
  2845     0785  0821               	movf	??_Get_RTC,w
  2846     0786  00F2               	movwf	___awdiv@dividend
  2847     0787  0822               	movf	??_Get_RTC+1,w
  2848     0788  00F3               	movwf	___awdiv@dividend+1
  2849     0789  120A  118A  2371  120A  118A  	fcall	___awdiv
  2850     078E  0870               	movf	?___awdiv,w
  2851     078F  120A  118A  21CE  120A  118A  	fcall	_BCD_to_DEC
  2852     0794  120A  118A  2112  120A  118A  	fcall	_DEC_to_ASCII
  2853     0799  120A  118A  213F  120A  118A  	fcall	_UART_Write
  2854     079E                     l1380:
  2855                           
  2856                           ;main.c: 90:     UART_Write(DEC_to_ASCII(BCD_to_DEC(RC_Minuts % 16)));
  2857     079E  1283               	bcf	3,5	;RP0=0, select bank0
  2858     079F  1303               	bcf	3,6	;RP1=0, select bank0
  2859     07A0  0825               	movf	Get_RTC@RC_Minuts,w
  2860     07A1  390F               	andlw	15
  2861     07A2  120A  118A  21CE  120A  118A  	fcall	_BCD_to_DEC
  2862     07A7  120A  118A  2112  120A  118A  	fcall	_DEC_to_ASCII
  2863     07AC  120A  118A  213F  120A  118A  	fcall	_UART_Write
  2864     07B1                     l1382:
  2865                           
  2866                           ;main.c: 91:     UART_Write(':');
  2867     07B1  303A               	movlw	58
  2868     07B2  120A  118A  213F  120A  118A  	fcall	_UART_Write
  2869                           
  2870                           ;main.c: 92:     UART_Write(DEC_to_ASCII(BCD_to_DEC(RC_Seconds / 16)));
  2871     07B7  3010               	movlw	16
  2872     07B8  00F0               	movwf	___awdiv@divisor
  2873     07B9  3000               	movlw	0
  2874     07BA  00F1               	movwf	___awdiv@divisor+1
  2875     07BB  1283               	bcf	3,5	;RP0=0, select bank0
  2876     07BC  1303               	bcf	3,6	;RP1=0, select bank0
  2877     07BD  0824               	movf	Get_RTC@RC_Seconds,w
  2878     07BE  00A1               	movwf	??_Get_RTC
  2879     07BF  01A2               	clrf	??_Get_RTC+1
  2880     07C0  0821               	movf	??_Get_RTC,w
  2881     07C1  00F2               	movwf	___awdiv@dividend
  2882     07C2  0822               	movf	??_Get_RTC+1,w
  2883     07C3  00F3               	movwf	___awdiv@dividend+1
  2884     07C4  120A  118A  2371  120A  118A  	fcall	___awdiv
  2885     07C9  0870               	movf	?___awdiv,w
  2886     07CA  120A  118A  21CE  120A  118A  	fcall	_BCD_to_DEC
  2887     07CF  120A  118A  2112  120A  118A  	fcall	_DEC_to_ASCII
  2888     07D4  120A  118A  213F  120A  118A  	fcall	_UART_Write
  2889                           
  2890                           ;main.c: 93:     UART_Write(DEC_to_ASCII(BCD_to_DEC(RC_Seconds % 16)));
  2891     07D9  1283               	bcf	3,5	;RP0=0, select bank0
  2892     07DA  1303               	bcf	3,6	;RP1=0, select bank0
  2893     07DB  0824               	movf	Get_RTC@RC_Seconds,w
  2894     07DC  390F               	andlw	15
  2895     07DD  120A  118A  21CE  120A  118A  	fcall	_BCD_to_DEC
  2896     07E2  120A  118A  2112  120A  118A  	fcall	_DEC_to_ASCII
  2897     07E7  120A  118A  213F  120A  118A  	fcall	_UART_Write
  2898     07EC                     l1384:
  2899                           
  2900                           ;main.c: 94:     UART_Write('\r');
  2901     07EC  300D               	movlw	13
  2902     07ED  120A  118A  213F  120A  118A  	fcall	_UART_Write
  2903     07F2                     l1386:
  2904                           
  2905                           ;main.c: 95:     UART_Write('\n');
  2906     07F2  300A               	movlw	10
  2907     07F3  120A  118A  213F  120A  118A  	fcall	_UART_Write
  2908     07F8                     l189:
  2909     07F8  0008               	return
  2910     07F9                     __end_of_Get_RTC:
  2911                           
  2912                           	psect	text12
  2913     0244                     __ptext12:	
  2914 ;; *************** function _UART_Write_Text *****************
  2915 ;; Defined at:
  2916 ;;		line 29 in file "EUSART.c"
  2917 ;; Parameters:    Size  Location     Type
  2918 ;;  text            2    1[COMMON] PTR const unsigned char 
  2919 ;;		 -> STR_22(20), STR_21(21), STR_20(20), STR_19(16), 
  2920 ;;		 -> STR_18(12), STR_17(17), STR_16(18), STR_15(18), 
  2921 ;;		 -> STR_14(17), STR_13(19), STR_12(12), STR_11(50), 
  2922 ;;		 -> STR_10(15), STR_9(15), STR_8(15), STR_7(9), 
  2923 ;;		 -> STR_6(14), STR_5(15), STR_4(15), STR_3(14), 
  2924 ;;		 -> STR_2(16), STR_1(10), 
  2925 ;; Auto vars:     Size  Location     Type
  2926 ;;  i               2    6[COMMON] int 
  2927 ;; Return value:  Size  Location     Type
  2928 ;;                  1    wreg      void 
  2929 ;; Registers used:
  2930 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2931 ;; Tracked objects:
  2932 ;;		On entry : 0/0
  2933 ;;		On exit  : 0/0
  2934 ;;		Unchanged: 0/0
  2935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2936 ;;      Params:         2       0       0       0       0
  2937 ;;      Locals:         2       0       0       0       0
  2938 ;;      Temps:          3       0       0       0       0
  2939 ;;      Totals:         7       0       0       0       0
  2940 ;;Total ram usage:        7 bytes
  2941 ;; Hardware stack levels used: 1
  2942 ;; Hardware stack levels required when called: 1
  2943 ;; This function calls:
  2944 ;;		_UART_Write
  2945 ;; This function is called by:
  2946 ;;		_UART_Write_Text_ln
  2947 ;;		_Get_RTC
  2948 ;; This function uses a non-reentrant model
  2949 ;;
  2950                           
  2951     0244                     _UART_Write_Text:	
  2952                           ;psect for function _UART_Write_Text
  2953                           
  2954     0244                     l1154:	
  2955                           ;incstack = 0
  2956                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2957                           
  2958                           
  2959                           ;EUSART.c: 30:     int i;;EUSART.c: 31:     for(i=0;text[i]!='\0';i++){
  2960     0244  01F6               	clrf	UART_Write_Text@i
  2961     0245  01F7               	clrf	UART_Write_Text@i+1
  2962     0246  2A69               	goto	l1160
  2963     0247                     l1156:
  2964                           
  2965                           ;EUSART.c: 32:         UART_Write(text[i]);
  2966     0247  0876               	movf	UART_Write_Text@i,w
  2967     0248  0771               	addwf	UART_Write_Text@text,w
  2968     0249  00F4               	movwf	??_UART_Write_Text+1
  2969     024A  0872               	movf	UART_Write_Text@text+1,w
  2970     024B  00F3               	movwf	??_UART_Write_Text
  2971     024C  1803               	skipnc
  2972     024D  0AF3               	incf	??_UART_Write_Text,f
  2973     024E  1FF6               	btfss	UART_Write_Text@i,7
  2974     024F  2A51               	goto	u350
  2975     0250  03F3               	decf	??_UART_Write_Text,f
  2976     0251                     u350:
  2977     0251  0873               	movf	??_UART_Write_Text,w
  2978     0252  00F5               	movwf	??_UART_Write_Text+2
  2979     0253  0875               	movf	??_UART_Write_Text+2,w
  2980     0254  1283               	bcf	3,5	;RP0=0, select bank0
  2981     0255  1303               	bcf	3,6	;RP1=0, select bank0
  2982     0256  00FF               	movwf	btemp+1
  2983     0257  0874               	movf	??_UART_Write_Text+1,w
  2984     0258  0084               	movwf	4
  2985     0259  120A  118A  2003  120A  118A  	fcall	stringtab
  2986     025E  120A  118A  213F  120A  118A  	fcall	_UART_Write
  2987     0263                     l1158:
  2988                           
  2989                           ;EUSART.c: 33:     }
  2990     0263  3001               	movlw	1
  2991     0264  07F6               	addwf	UART_Write_Text@i,f
  2992     0265  1803               	skipnc
  2993     0266  0AF7               	incf	UART_Write_Text@i+1,f
  2994     0267  3000               	movlw	0
  2995     0268  07F7               	addwf	UART_Write_Text@i+1,f
  2996     0269                     l1160:
  2997     0269  0876               	movf	UART_Write_Text@i,w
  2998     026A  0771               	addwf	UART_Write_Text@text,w
  2999     026B  00F4               	movwf	??_UART_Write_Text+1
  3000     026C  0872               	movf	UART_Write_Text@text+1,w
  3001     026D  00F3               	movwf	??_UART_Write_Text
  3002     026E  1803               	skipnc
  3003     026F  0AF3               	incf	??_UART_Write_Text,f
  3004     0270  1FF6               	btfss	UART_Write_Text@i,7
  3005     0271  2A73               	goto	u360
  3006     0272  03F3               	decf	??_UART_Write_Text,f
  3007     0273                     u360:
  3008     0273  0873               	movf	??_UART_Write_Text,w
  3009     0274  00F5               	movwf	??_UART_Write_Text+2
  3010     0275  0875               	movf	??_UART_Write_Text+2,w
  3011     0276  1283               	bcf	3,5	;RP0=0, select bank0
  3012     0277  1303               	bcf	3,6	;RP1=0, select bank0
  3013     0278  00FF               	movwf	btemp+1
  3014     0279  0874               	movf	??_UART_Write_Text+1,w
  3015     027A  0084               	movwf	4
  3016     027B  120A  118A  2003  120A  118A  	fcall	stringtab
  3017     0280  3A00               	xorlw	0
  3018     0281  1D03               	skipz
  3019     0282  2A84               	goto	u371
  3020     0283  2A85               	goto	u370
  3021     0284                     u371:
  3022     0284  2A47               	goto	l1156
  3023     0285                     u370:
  3024     0285                     l84:
  3025     0285  0008               	return
  3026     0286                     __end_of_UART_Write_Text:
  3027                           
  3028                           	psect	text13
  3029     013F                     __ptext13:	
  3030 ;; *************** function _UART_Write *****************
  3031 ;; Defined at:
  3032 ;;		line 18 in file "EUSART.c"
  3033 ;; Parameters:    Size  Location     Type
  3034 ;;  data            1    wreg     const unsigned char 
  3035 ;; Auto vars:     Size  Location     Type
  3036 ;;  data            1    0[COMMON] const unsigned char 
  3037 ;; Return value:  Size  Location     Type
  3038 ;;                  1    wreg      void 
  3039 ;; Registers used:
  3040 ;;		wreg
  3041 ;; Tracked objects:
  3042 ;;		On entry : 0/0
  3043 ;;		On exit  : 0/0
  3044 ;;		Unchanged: 0/0
  3045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3046 ;;      Params:         0       0       0       0       0
  3047 ;;      Locals:         1       0       0       0       0
  3048 ;;      Temps:          0       0       0       0       0
  3049 ;;      Totals:         1       0       0       0       0
  3050 ;;Total ram usage:        1 bytes
  3051 ;; Hardware stack levels used: 1
  3052 ;; This function calls:
  3053 ;;		Nothing
  3054 ;; This function is called by:
  3055 ;;		_UART_Write_Text
  3056 ;;		_UART_Write_Text_ln
  3057 ;;		_Get_RTC
  3058 ;;		_UART_Write_ln
  3059 ;; This function uses a non-reentrant model
  3060 ;;
  3061                           
  3062     013F                     _UART_Write:	
  3063                           ;psect for function _UART_Write
  3064                           
  3065                           
  3066                           ;incstack = 0
  3067                           ; Regs used in _UART_Write: [wreg]
  3068                           ;UART_Write@data stored from wreg
  3069     013F  00F0               	movwf	UART_Write@data
  3070     0140                     l1128:
  3071     0140                     l72:	
  3072                           ;EUSART.c: 19:     while(!TRMT);
  3073                           
  3074     0140  1683               	bsf	3,5	;RP0=1, select bank1
  3075     0141  1303               	bcf	3,6	;RP1=0, select bank1
  3076     0142  1C98               	btfss	24,1	;volatile
  3077     0143  2945               	goto	u341
  3078     0144  2946               	goto	u340
  3079     0145                     u341:
  3080     0145  2940               	goto	l72
  3081     0146                     u340:
  3082     0146                     l1130:
  3083                           
  3084                           ;EUSART.c: 20:     TXREG = data;
  3085     0146  0870               	movf	UART_Write@data,w
  3086     0147  1283               	bcf	3,5	;RP0=0, select bank0
  3087     0148  1303               	bcf	3,6	;RP1=0, select bank0
  3088     0149  0099               	movwf	25	;volatile
  3089     014A                     l75:
  3090     014A  0008               	return
  3091     014B                     __end_of_UART_Write:
  3092                           
  3093                           	psect	text14
  3094     03D8                     __ptext14:	
  3095 ;; *************** function _RTC_Get_Time *****************
  3096 ;; Defined at:
  3097 ;;		line 38 in file "DS1307.c"
  3098 ;; Parameters:    Size  Location     Type
  3099 ;;  second          1    wreg     PTR unsigned char 
  3100 ;;		 -> Get_RTC@RC_Seconds(1), 
  3101 ;;  minute          1    3[COMMON] PTR unsigned char 
  3102 ;;		 -> Get_RTC@RC_Minuts(1), 
  3103 ;;  hour            1    4[COMMON] PTR unsigned char 
  3104 ;;		 -> Get_RTC@RC_Hour(1), 
  3105 ;;  dayweek         1    5[COMMON] PTR unsigned char 
  3106 ;;		 -> Get_RTC@RC_Dayweek(1), 
  3107 ;;  day             1    6[COMMON] PTR unsigned char 
  3108 ;;		 -> Get_RTC@RC_Day(1), 
  3109 ;;  month           1    7[COMMON] PTR unsigned char 
  3110 ;;		 -> Get_RTC@RC_Month(1), 
  3111 ;;  year            1    8[COMMON] PTR unsigned char 
  3112 ;;		 -> Get_RTC@RC_Year(1), 
  3113 ;; Auto vars:     Size  Location     Type
  3114 ;;  second          1    9[COMMON] PTR unsigned char 
  3115 ;;		 -> Get_RTC@RC_Seconds(1), 
  3116 ;; Return value:  Size  Location     Type
  3117 ;;                  1    wreg      void 
  3118 ;; Registers used:
  3119 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3120 ;; Tracked objects:
  3121 ;;		On entry : 0/0
  3122 ;;		On exit  : 0/0
  3123 ;;		Unchanged: 0/0
  3124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3125 ;;      Params:         6       0       0       0       0
  3126 ;;      Locals:         1       0       0       0       0
  3127 ;;      Temps:          0       0       0       0       0
  3128 ;;      Totals:         7       0       0       0       0
  3129 ;;Total ram usage:        7 bytes
  3130 ;; Hardware stack levels used: 1
  3131 ;; Hardware stack levels required when called: 3
  3132 ;; This function calls:
  3133 ;;		_I2C_Read
  3134 ;;		_I2C_Start
  3135 ;;		_I2C_Stop
  3136 ;;		_I2C_Write
  3137 ;; This function is called by:
  3138 ;;		_Get_RTC
  3139 ;; This function uses a non-reentrant model
  3140 ;;
  3141                           
  3142     03D8                     _RTC_Get_Time:	
  3143                           ;psect for function _RTC_Get_Time
  3144                           
  3145                           
  3146                           ;incstack = 0
  3147                           ; Regs used in _RTC_Get_Time: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3148                           ;RTC_Get_Time@second stored from wreg
  3149     03D8  00F9               	movwf	RTC_Get_Time@second
  3150     03D9                     l1274:
  3151                           
  3152                           ;DS1307.c: 38: void RTC_Get_Time(unsigned char *second, unsigned char *minute,;DS1307.c:
      +                           39:         unsigned char *hour, unsigned char *dayweek, unsigned char *day,;DS1307.c: 
      +                          40:         unsigned char *month, unsigned char *year){;DS1307.c: 41:     I2C_Start();
  3153     03D9  120A  118A  2122  120A  118A  	fcall	_I2C_Start
  3154                           
  3155                           ;DS1307.c: 43:     I2C_Write(0xD0);
  3156     03DE  30D0               	movlw	208
  3157     03DF  120A  118A  2134  120A  118A  	fcall	_I2C_Write
  3158                           
  3159                           ;DS1307.c: 44:     I2C_Write(0x00);
  3160     03E4  3000               	movlw	0
  3161     03E5  120A  118A  2134  120A  118A  	fcall	_I2C_Write
  3162                           
  3163                           ;DS1307.c: 46:     I2C_Stop();
  3164     03EA  120A  118A  212B  120A  118A  	fcall	_I2C_Stop
  3165                           
  3166                           ;DS1307.c: 48:     I2C_Start();
  3167     03EF  120A  118A  2122  120A  118A  	fcall	_I2C_Start
  3168                           
  3169                           ;DS1307.c: 50:     I2C_Write(0xD1);
  3170     03F4  30D1               	movlw	209
  3171     03F5  120A  118A  2134  120A  118A  	fcall	_I2C_Write
  3172     03FA                     l1276:
  3173                           
  3174                           ;DS1307.c: 52:     *second = I2C_Read(0);
  3175     03FA  0879               	movf	RTC_Get_Time@second,w
  3176     03FB  0084               	movwf	4
  3177     03FC  3000               	movlw	0
  3178     03FD  120A  118A  21B4  120A  118A  	fcall	_I2C_Read
  3179     0402  1383               	bcf	3,7	;select IRP bank0
  3180     0403  0080               	movwf	0
  3181     0404                     l1278:
  3182                           
  3183                           ;DS1307.c: 53:     *minute = I2C_Read(0);
  3184     0404  0873               	movf	RTC_Get_Time@minute,w
  3185     0405  0084               	movwf	4
  3186     0406  3000               	movlw	0
  3187     0407  120A  118A  21B4  120A  118A  	fcall	_I2C_Read
  3188     040C  1383               	bcf	3,7	;select IRP bank0
  3189     040D  0080               	movwf	0
  3190     040E                     l1280:
  3191                           
  3192                           ;DS1307.c: 54:     *hour = I2C_Read(0);
  3193     040E  0874               	movf	RTC_Get_Time@hour,w
  3194     040F  0084               	movwf	4
  3195     0410  3000               	movlw	0
  3196     0411  120A  118A  21B4  120A  118A  	fcall	_I2C_Read
  3197     0416  1383               	bcf	3,7	;select IRP bank0
  3198     0417  0080               	movwf	0
  3199     0418                     l1282:
  3200                           
  3201                           ;DS1307.c: 55:     *dayweek = I2C_Read(0);
  3202     0418  0875               	movf	RTC_Get_Time@dayweek,w
  3203     0419  0084               	movwf	4
  3204     041A  3000               	movlw	0
  3205     041B  120A  118A  21B4  120A  118A  	fcall	_I2C_Read
  3206     0420  1383               	bcf	3,7	;select IRP bank0
  3207     0421  0080               	movwf	0
  3208     0422                     l1284:
  3209                           
  3210                           ;DS1307.c: 56:     *day = I2C_Read(0);
  3211     0422  0876               	movf	RTC_Get_Time@day,w
  3212     0423  0084               	movwf	4
  3213     0424  3000               	movlw	0
  3214     0425  120A  118A  21B4  120A  118A  	fcall	_I2C_Read
  3215     042A  1383               	bcf	3,7	;select IRP bank0
  3216     042B  0080               	movwf	0
  3217     042C                     l1286:
  3218                           
  3219                           ;DS1307.c: 57:     *month = I2C_Read(0);
  3220     042C  0877               	movf	RTC_Get_Time@month,w
  3221     042D  0084               	movwf	4
  3222     042E  3000               	movlw	0
  3223     042F  120A  118A  21B4  120A  118A  	fcall	_I2C_Read
  3224     0434  1383               	bcf	3,7	;select IRP bank0
  3225     0435  0080               	movwf	0
  3226     0436                     l1288:
  3227                           
  3228                           ;DS1307.c: 58:     *year = I2C_Read(1);
  3229     0436  0878               	movf	RTC_Get_Time@year,w
  3230     0437  0084               	movwf	4
  3231     0438  3001               	movlw	1
  3232     0439  120A  118A  21B4  120A  118A  	fcall	_I2C_Read
  3233     043E  1383               	bcf	3,7	;select IRP bank0
  3234     043F  0080               	movwf	0
  3235     0440                     l1290:
  3236                           
  3237                           ;DS1307.c: 60:     I2C_Stop();
  3238     0440  120A  118A  212B  120A  118A  	fcall	_I2C_Stop
  3239     0445                     l117:
  3240     0445  0008               	return
  3241     0446                     __end_of_RTC_Get_Time:
  3242                           
  3243                           	psect	text15
  3244     0134                     __ptext15:	
  3245 ;; *************** function _I2C_Write *****************
  3246 ;; Defined at:
  3247 ;;		line 35 in file "I2C.c"
  3248 ;; Parameters:    Size  Location     Type
  3249 ;;  data            1    wreg     unsigned char 
  3250 ;; Auto vars:     Size  Location     Type
  3251 ;;  data            1    0[COMMON] unsigned char 
  3252 ;; Return value:  Size  Location     Type
  3253 ;;                  1    wreg      void 
  3254 ;; Registers used:
  3255 ;;		wreg, status,2, status,0, pclath, cstack
  3256 ;; Tracked objects:
  3257 ;;		On entry : 0/0
  3258 ;;		On exit  : 0/0
  3259 ;;		Unchanged: 0/0
  3260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3261 ;;      Params:         0       0       0       0       0
  3262 ;;      Locals:         1       0       0       0       0
  3263 ;;      Temps:          0       0       0       0       0
  3264 ;;      Totals:         1       0       0       0       0
  3265 ;;Total ram usage:        1 bytes
  3266 ;; Hardware stack levels used: 1
  3267 ;; Hardware stack levels required when called: 1
  3268 ;; This function calls:
  3269 ;;		_I2C_Wait
  3270 ;; This function is called by:
  3271 ;;		_RTC_Init
  3272 ;;		_RTC_Set_Time
  3273 ;;		_RTC_Get_Time
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277     0134                     _I2C_Write:	
  3278                           ;psect for function _I2C_Write
  3279                           
  3280                           
  3281                           ;incstack = 0
  3282                           ; Regs used in _I2C_Write: [wreg+status,2+status,0+pclath+cstack]
  3283                           ;I2C_Write@data stored from wreg
  3284     0134  00F0               	movwf	I2C_Write@data
  3285     0135                     l1140:
  3286                           
  3287                           ;I2C.c: 36:     I2C_Wait();
  3288     0135  120A  118A  214B  120A  118A  	fcall	_I2C_Wait
  3289     013A                     l1142:
  3290                           
  3291                           ;I2C.c: 37:     SSPBUF = data;
  3292     013A  0870               	movf	I2C_Write@data,w
  3293     013B  1283               	bcf	3,5	;RP0=0, select bank0
  3294     013C  1303               	bcf	3,6	;RP1=0, select bank0
  3295     013D  0093               	movwf	19	;volatile
  3296     013E                     l39:
  3297     013E  0008               	return
  3298     013F                     __end_of_I2C_Write:
  3299                           
  3300                           	psect	text16
  3301     012B                     __ptext16:	
  3302 ;; *************** function _I2C_Stop *****************
  3303 ;; Defined at:
  3304 ;;		line 30 in file "I2C.c"
  3305 ;; Parameters:    Size  Location     Type
  3306 ;;		None
  3307 ;; Auto vars:     Size  Location     Type
  3308 ;;		None
  3309 ;; Return value:  Size  Location     Type
  3310 ;;                  1    wreg      void 
  3311 ;; Registers used:
  3312 ;;		wreg, status,2, status,0, pclath, cstack
  3313 ;; Tracked objects:
  3314 ;;		On entry : 0/0
  3315 ;;		On exit  : 0/0
  3316 ;;		Unchanged: 0/0
  3317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3318 ;;      Params:         0       0       0       0       0
  3319 ;;      Locals:         0       0       0       0       0
  3320 ;;      Temps:          0       0       0       0       0
  3321 ;;      Totals:         0       0       0       0       0
  3322 ;;Total ram usage:        0 bytes
  3323 ;; Hardware stack levels used: 1
  3324 ;; Hardware stack levels required when called: 1
  3325 ;; This function calls:
  3326 ;;		_I2C_Wait
  3327 ;; This function is called by:
  3328 ;;		_RTC_Init
  3329 ;;		_RTC_Set_Time
  3330 ;;		_RTC_Get_Time
  3331 ;; This function uses a non-reentrant model
  3332 ;;
  3333                           
  3334     012B                     _I2C_Stop:	
  3335                           ;psect for function _I2C_Stop
  3336                           
  3337     012B                     l1136:	
  3338                           ;incstack = 0
  3339                           ; Regs used in _I2C_Stop: [wreg+status,2+status,0+pclath+cstack]
  3340                           
  3341                           
  3342                           ;I2C.c: 31:     I2C_Wait();
  3343     012B  120A  118A  214B  120A  118A  	fcall	_I2C_Wait
  3344     0130                     l1138:
  3345                           
  3346                           ;I2C.c: 32:     SSPCON2bits.PEN = 1;
  3347     0130  1683               	bsf	3,5	;RP0=1, select bank1
  3348     0131  1303               	bcf	3,6	;RP1=0, select bank1
  3349     0132  1511               	bsf	17,2	;volatile
  3350     0133                     l36:
  3351     0133  0008               	return
  3352     0134                     __end_of_I2C_Stop:
  3353                           
  3354                           	psect	text17
  3355     0122                     __ptext17:	
  3356 ;; *************** function _I2C_Start *****************
  3357 ;; Defined at:
  3358 ;;		line 20 in file "I2C.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;		None
  3361 ;; Auto vars:     Size  Location     Type
  3362 ;;		None
  3363 ;; Return value:  Size  Location     Type
  3364 ;;                  1    wreg      void 
  3365 ;; Registers used:
  3366 ;;		wreg, status,2, status,0, pclath, cstack
  3367 ;; Tracked objects:
  3368 ;;		On entry : 0/0
  3369 ;;		On exit  : 0/0
  3370 ;;		Unchanged: 0/0
  3371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3372 ;;      Params:         0       0       0       0       0
  3373 ;;      Locals:         0       0       0       0       0
  3374 ;;      Temps:          0       0       0       0       0
  3375 ;;      Totals:         0       0       0       0       0
  3376 ;;Total ram usage:        0 bytes
  3377 ;; Hardware stack levels used: 1
  3378 ;; Hardware stack levels required when called: 1
  3379 ;; This function calls:
  3380 ;;		_I2C_Wait
  3381 ;; This function is called by:
  3382 ;;		_RTC_Init
  3383 ;;		_RTC_Set_Time
  3384 ;;		_RTC_Get_Time
  3385 ;; This function uses a non-reentrant model
  3386 ;;
  3387                           
  3388     0122                     _I2C_Start:	
  3389                           ;psect for function _I2C_Start
  3390                           
  3391     0122                     l1132:	
  3392                           ;incstack = 0
  3393                           ; Regs used in _I2C_Start: [wreg+status,2+status,0+pclath+cstack]
  3394                           
  3395                           
  3396                           ;I2C.c: 21:     I2C_Wait();
  3397     0122  120A  118A  214B  120A  118A  	fcall	_I2C_Wait
  3398     0127                     l1134:
  3399                           
  3400                           ;I2C.c: 22:     SSPCON2bits.SEN = 1;
  3401     0127  1683               	bsf	3,5	;RP0=1, select bank1
  3402     0128  1303               	bcf	3,6	;RP1=0, select bank1
  3403     0129  1411               	bsf	17,0	;volatile
  3404     012A                     l30:
  3405     012A  0008               	return
  3406     012B                     __end_of_I2C_Start:
  3407                           
  3408                           	psect	text18
  3409     01B4                     __ptext18:	
  3410 ;; *************** function _I2C_Read *****************
  3411 ;; Defined at:
  3412 ;;		line 40 in file "I2C.c"
  3413 ;; Parameters:    Size  Location     Type
  3414 ;;  acknowledge     1    wreg     _Bool 
  3415 ;; Auto vars:     Size  Location     Type
  3416 ;;  acknowledge     1    1[COMMON] _Bool 
  3417 ;;  read_data       1    2[COMMON] unsigned char 
  3418 ;; Return value:  Size  Location     Type
  3419 ;;                  1    wreg      unsigned char 
  3420 ;; Registers used:
  3421 ;;		wreg, status,2, status,0, pclath, cstack
  3422 ;; Tracked objects:
  3423 ;;		On entry : 0/0
  3424 ;;		On exit  : 0/0
  3425 ;;		Unchanged: 0/0
  3426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3427 ;;      Params:         0       0       0       0       0
  3428 ;;      Locals:         2       0       0       0       0
  3429 ;;      Temps:          0       0       0       0       0
  3430 ;;      Totals:         2       0       0       0       0
  3431 ;;Total ram usage:        2 bytes
  3432 ;; Hardware stack levels used: 1
  3433 ;; Hardware stack levels required when called: 2
  3434 ;; This function calls:
  3435 ;;		_I2C_Send_ACK
  3436 ;;		_I2C_Wait
  3437 ;; This function is called by:
  3438 ;;		_RTC_Get_Time
  3439 ;; This function uses a non-reentrant model
  3440 ;;
  3441                           
  3442     01B4                     _I2C_Read:	
  3443                           ;psect for function _I2C_Read
  3444                           
  3445                           
  3446                           ;incstack = 0
  3447                           ; Regs used in _I2C_Read: [wreg+status,2+status,0+pclath+cstack]
  3448                           ;I2C_Read@acknowledge stored from wreg
  3449     01B4  00F1               	movwf	I2C_Read@acknowledge
  3450     01B5                     l1144:
  3451                           
  3452                           ;I2C.c: 41:     unsigned char read_data;;I2C.c: 43:     I2C_Wait();
  3453     01B5  120A  118A  214B  120A  118A  	fcall	_I2C_Wait
  3454     01BA                     l1146:
  3455                           
  3456                           ;I2C.c: 44:     SSPCON2bits.RCEN = 1;
  3457     01BA  1683               	bsf	3,5	;RP0=1, select bank1
  3458     01BB  1303               	bcf	3,6	;RP1=0, select bank1
  3459     01BC  1591               	bsf	17,3	;volatile
  3460                           
  3461                           ;I2C.c: 45:     I2C_Wait();
  3462     01BD  120A  118A  214B  120A  118A  	fcall	_I2C_Wait
  3463     01C2                     l1148:
  3464                           
  3465                           ;I2C.c: 46:     read_data = SSPBUF;
  3466     01C2  1283               	bcf	3,5	;RP0=0, select bank0
  3467     01C3  1303               	bcf	3,6	;RP1=0, select bank0
  3468     01C4  0813               	movf	19,w	;volatile
  3469     01C5  00F2               	movwf	I2C_Read@read_data
  3470     01C6                     l1150:
  3471                           
  3472                           ;I2C.c: 48:     I2C_Send_ACK(acknowledge);
  3473     01C6  0871               	movf	I2C_Read@acknowledge,w
  3474     01C7  120A  118A  2158  120A  118A  	fcall	_I2C_Send_ACK
  3475                           
  3476                           ;I2C.c: 50:     return read_data;
  3477     01CC  0872               	movf	I2C_Read@read_data,w
  3478     01CD                     l42:
  3479     01CD  0008               	return
  3480     01CE                     __end_of_I2C_Read:
  3481                           
  3482                           	psect	text19
  3483     0158                     __ptext19:	
  3484 ;; *************** function _I2C_Send_ACK *****************
  3485 ;; Defined at:
  3486 ;;		line 53 in file "I2C.c"
  3487 ;; Parameters:    Size  Location     Type
  3488 ;;  ack             1    wreg     _Bool 
  3489 ;; Auto vars:     Size  Location     Type
  3490 ;;  ack             1    0[COMMON] _Bool 
  3491 ;; Return value:  Size  Location     Type
  3492 ;;                  1    wreg      void 
  3493 ;; Registers used:
  3494 ;;		wreg, status,2, status,0, pclath, cstack
  3495 ;; Tracked objects:
  3496 ;;		On entry : 0/0
  3497 ;;		On exit  : 0/0
  3498 ;;		Unchanged: 0/0
  3499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3500 ;;      Params:         0       0       0       0       0
  3501 ;;      Locals:         1       0       0       0       0
  3502 ;;      Temps:          0       0       0       0       0
  3503 ;;      Totals:         1       0       0       0       0
  3504 ;;Total ram usage:        1 bytes
  3505 ;; Hardware stack levels used: 1
  3506 ;; Hardware stack levels required when called: 1
  3507 ;; This function calls:
  3508 ;;		_I2C_Wait
  3509 ;; This function is called by:
  3510 ;;		_I2C_Read
  3511 ;; This function uses a non-reentrant model
  3512 ;;
  3513                           
  3514     0158                     _I2C_Send_ACK:	
  3515                           ;psect for function _I2C_Send_ACK
  3516                           
  3517                           
  3518                           ;incstack = 0
  3519                           ; Regs used in _I2C_Send_ACK: [wreg+status,2+status,0+pclath+cstack]
  3520                           ;I2C_Send_ACK@ack stored from wreg
  3521     0158  00F0               	movwf	I2C_Send_ACK@ack
  3522     0159                     l1122:
  3523                           
  3524                           ;I2C.c: 54:     I2C_Wait();
  3525     0159  120A  118A  214B  120A  118A  	fcall	_I2C_Wait
  3526     015E                     l1124:
  3527                           
  3528                           ;I2C.c: 55:     SSPCON2bits.ACKDT = ack;
  3529     015E  0C70               	rrf	I2C_Send_ACK@ack,w
  3530     015F  1683               	bsf	3,5	;RP0=1, select bank1
  3531     0160  1303               	bcf	3,6	;RP1=0, select bank1
  3532     0161  1C03               	skipc
  3533     0162  1291               	bcf	17,5	;volatile
  3534     0163  1803               	skipnc
  3535     0164  1691               	bsf	17,5	;volatile
  3536     0165                     l1126:
  3537                           
  3538                           ;I2C.c: 56:     SSPCON2bits.ACKEN = 1;
  3539     0165  1611               	bsf	17,4	;volatile
  3540     0166                     l45:
  3541     0166  0008               	return
  3542     0167                     __end_of_I2C_Send_ACK:
  3543                           
  3544                           	psect	text20
  3545     014B                     __ptext20:	
  3546 ;; *************** function _I2C_Wait *****************
  3547 ;; Defined at:
  3548 ;;		line 15 in file "I2C.c"
  3549 ;; Parameters:    Size  Location     Type
  3550 ;;		None
  3551 ;; Auto vars:     Size  Location     Type
  3552 ;;		None
  3553 ;; Return value:  Size  Location     Type
  3554 ;;                  1    wreg      void 
  3555 ;; Registers used:
  3556 ;;		wreg, status,2
  3557 ;; Tracked objects:
  3558 ;;		On entry : 0/0
  3559 ;;		On exit  : 0/0
  3560 ;;		Unchanged: 0/0
  3561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3562 ;;      Params:         0       0       0       0       0
  3563 ;;      Locals:         0       0       0       0       0
  3564 ;;      Temps:          0       0       0       0       0
  3565 ;;      Totals:         0       0       0       0       0
  3566 ;;Total ram usage:        0 bytes
  3567 ;; Hardware stack levels used: 1
  3568 ;; This function calls:
  3569 ;;		Nothing
  3570 ;; This function is called by:
  3571 ;;		_I2C_Start
  3572 ;;		_I2C_Stop
  3573 ;;		_I2C_Write
  3574 ;;		_I2C_Read
  3575 ;;		_I2C_Send_ACK
  3576 ;;		_I2C_Restart
  3577 ;;		_I2C_Read_ACK
  3578 ;; This function uses a non-reentrant model
  3579 ;;
  3580                           
  3581     014B                     _I2C_Wait:	
  3582                           ;psect for function _I2C_Wait
  3583                           
  3584     014B                     l1116:	
  3585                           ;incstack = 0
  3586                           ; Regs used in _I2C_Wait: [wreg+status,2]
  3587                           
  3588     014B                     l1118:	
  3589                           ;I2C.c: 16:     while ((SSPCON2 & 0x1F) || (SSPSTATbits.R_nW));
  3590                           
  3591     014B  1683               	bsf	3,5	;RP0=1, select bank1
  3592     014C  1303               	bcf	3,6	;RP1=0, select bank1
  3593     014D  0811               	movf	17,w	;volatile
  3594     014E  391F               	andlw	31
  3595     014F  1D03               	btfss	3,2
  3596     0150  2952               	goto	u321
  3597     0151  2953               	goto	u320
  3598     0152                     u321:
  3599     0152  294B               	goto	l1118
  3600     0153                     u320:
  3601     0153                     l1120:
  3602     0153  1914               	btfsc	20,2	;volatile
  3603     0154  2956               	goto	u331
  3604     0155  2957               	goto	u330
  3605     0156                     u331:
  3606     0156  294B               	goto	l1118
  3607     0157                     u330:
  3608     0157                     l27:
  3609     0157  0008               	return
  3610     0158                     __end_of_I2C_Wait:
  3611                           
  3612                           	psect	text21
  3613     0112                     __ptext21:	
  3614 ;; *************** function _DEC_to_ASCII *****************
  3615 ;; Defined at:
  3616 ;;		line 13 in file "converter.c"
  3617 ;; Parameters:    Size  Location     Type
  3618 ;;  dec             1    wreg     unsigned char 
  3619 ;; Auto vars:     Size  Location     Type
  3620 ;;  dec             1    0[COMMON] unsigned char 
  3621 ;; Return value:  Size  Location     Type
  3622 ;;                  1    wreg      unsigned char 
  3623 ;; Registers used:
  3624 ;;		wreg, status,2, status,0
  3625 ;; Tracked objects:
  3626 ;;		On entry : 0/0
  3627 ;;		On exit  : 0/0
  3628 ;;		Unchanged: 0/0
  3629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3630 ;;      Params:         0       0       0       0       0
  3631 ;;      Locals:         1       0       0       0       0
  3632 ;;      Temps:          0       0       0       0       0
  3633 ;;      Totals:         1       0       0       0       0
  3634 ;;Total ram usage:        1 bytes
  3635 ;; Hardware stack levels used: 1
  3636 ;; This function calls:
  3637 ;;		Nothing
  3638 ;; This function is called by:
  3639 ;;		_Get_RTC
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642                           
  3643     0112                     _DEC_to_ASCII:	
  3644                           ;psect for function _DEC_to_ASCII
  3645                           
  3646                           
  3647                           ;incstack = 0
  3648                           ; Regs used in _DEC_to_ASCII: [wreg+status,2+status,0]
  3649                           ;DEC_to_ASCII@dec stored from wreg
  3650     0112  00F0               	movwf	DEC_to_ASCII@dec
  3651     0113                     l1300:
  3652                           
  3653                           ;converter.c: 14:     return dec + 0x30;
  3654     0113  0870               	movf	DEC_to_ASCII@dec,w
  3655     0114  3E30               	addlw	48
  3656     0115                     l126:
  3657     0115  0008               	return
  3658     0116                     __end_of_DEC_to_ASCII:
  3659                           
  3660                           	psect	text22
  3661     01CE                     __ptext22:	
  3662 ;; *************** function _BCD_to_DEC *****************
  3663 ;; Defined at:
  3664 ;;		line 5 in file "converter.c"
  3665 ;; Parameters:    Size  Location     Type
  3666 ;;  bcd             1    wreg     unsigned char 
  3667 ;; Auto vars:     Size  Location     Type
  3668 ;;  bcd             1    0[BANK0 ] unsigned char 
  3669 ;; Return value:  Size  Location     Type
  3670 ;;                  1    wreg      unsigned char 
  3671 ;; Registers used:
  3672 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3673 ;; Tracked objects:
  3674 ;;		On entry : 0/0
  3675 ;;		On exit  : 0/0
  3676 ;;		Unchanged: 0/0
  3677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3678 ;;      Params:         0       0       0       0       0
  3679 ;;      Locals:         0       1       0       0       0
  3680 ;;      Temps:          3       0       0       0       0
  3681 ;;      Totals:         3       1       0       0       0
  3682 ;;Total ram usage:        4 bytes
  3683 ;; Hardware stack levels used: 1
  3684 ;; Hardware stack levels required when called: 1
  3685 ;; This function calls:
  3686 ;;		___awdiv
  3687 ;;		___bmul
  3688 ;; This function is called by:
  3689 ;;		_Get_RTC
  3690 ;; This function uses a non-reentrant model
  3691 ;;
  3692                           
  3693     01CE                     _BCD_to_DEC:	
  3694                           ;psect for function _BCD_to_DEC
  3695                           
  3696                           
  3697                           ;incstack = 0
  3698                           ; Regs used in _BCD_to_DEC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3699                           ;BCD_to_DEC@bcd stored from wreg
  3700     01CE  1283               	bcf	3,5	;RP0=0, select bank0
  3701     01CF  1303               	bcf	3,6	;RP1=0, select bank0
  3702     01D0  00A0               	movwf	BCD_to_DEC@bcd
  3703     01D1                     l1292:
  3704                           
  3705                           ;converter.c: 6:     return ((bcd / 16 * 10) + (bcd % 16));
  3706     01D1  300F               	movlw	15
  3707     01D2  0520               	andwf	BCD_to_DEC@bcd,w
  3708     01D3  00FB               	movwf	??_BCD_to_DEC
  3709     01D4  300A               	movlw	10
  3710     01D5  00F8               	movwf	___bmul@multiplicand
  3711     01D6  0820               	movf	BCD_to_DEC@bcd,w
  3712     01D7  00FC               	movwf	??_BCD_to_DEC+1
  3713     01D8  01FD               	clrf	??_BCD_to_DEC+2
  3714     01D9  087C               	movf	??_BCD_to_DEC+1,w
  3715     01DA  00F2               	movwf	___awdiv@dividend
  3716     01DB  087D               	movf	??_BCD_to_DEC+2,w
  3717     01DC  00F3               	movwf	___awdiv@dividend+1
  3718     01DD  3010               	movlw	16
  3719     01DE  00F0               	movwf	___awdiv@divisor
  3720     01DF  3000               	movlw	0
  3721     01E0  00F1               	movwf	___awdiv@divisor+1
  3722     01E1  120A  118A  2371  120A  118A  	fcall	___awdiv
  3723     01E6  0870               	movf	?___awdiv,w
  3724     01E7  120A  118A  2189  120A  118A  	fcall	___bmul
  3725     01EC  077B               	addwf	??_BCD_to_DEC,w
  3726     01ED                     l120:
  3727     01ED  0008               	return
  3728     01EE                     __end_of_BCD_to_DEC:
  3729                           
  3730                           	psect	text23
  3731     0189                     __ptext23:	
  3732 ;; *************** function ___bmul *****************
  3733 ;; Defined at:
  3734 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul8.c"
  3735 ;; Parameters:    Size  Location     Type
  3736 ;;  multiplier      1    wreg     unsigned char 
  3737 ;;  multiplicand    1    8[COMMON] unsigned char 
  3738 ;; Auto vars:     Size  Location     Type
  3739 ;;  multiplier      1   10[COMMON] unsigned char 
  3740 ;;  product         1    9[COMMON] unsigned char 
  3741 ;; Return value:  Size  Location     Type
  3742 ;;                  1    wreg      unsigned char 
  3743 ;; Registers used:
  3744 ;;		wreg, status,2, status,0, btemp+1
  3745 ;; Tracked objects:
  3746 ;;		On entry : 0/0
  3747 ;;		On exit  : 0/0
  3748 ;;		Unchanged: 0/0
  3749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3750 ;;      Params:         1       0       0       0       0
  3751 ;;      Locals:         2       0       0       0       0
  3752 ;;      Temps:          0       0       0       0       0
  3753 ;;      Totals:         3       0       0       0       0
  3754 ;;Total ram usage:        3 bytes
  3755 ;; Hardware stack levels used: 1
  3756 ;; This function calls:
  3757 ;;		Nothing
  3758 ;; This function is called by:
  3759 ;;		_BCD_to_DEC
  3760 ;;		_Write_RTC
  3761 ;; This function uses a non-reentrant model
  3762 ;;
  3763                           
  3764     0189                     ___bmul:	
  3765                           ;psect for function ___bmul
  3766                           
  3767                           
  3768                           ;incstack = 0
  3769                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+1]
  3770                           ;___bmul@multiplier stored from wreg
  3771     0189  00FA               	movwf	___bmul@multiplier
  3772     018A                     l1162:
  3773     018A  01F9               	clrf	___bmul@product
  3774     018B                     l1164:
  3775     018B  1C7A               	btfss	___bmul@multiplier,0
  3776     018C  298E               	goto	u381
  3777     018D  298F               	goto	u380
  3778     018E                     u381:
  3779     018E  2993               	goto	l1168
  3780     018F                     u380:
  3781     018F                     l1166:
  3782     018F  0878               	movf	___bmul@multiplicand,w
  3783     0190  00FF               	movwf	btemp+1
  3784     0191  087F               	movf	btemp+1,w
  3785     0192  07F9               	addwf	___bmul@product,f
  3786     0193                     l1168:
  3787     0193  1003               	clrc
  3788     0194  0DF8               	rlf	___bmul@multiplicand,f
  3789     0195                     l1170:
  3790     0195  1003               	clrc
  3791     0196  0CFA               	rrf	___bmul@multiplier,f
  3792     0197                     l1172:
  3793     0197  087A               	movf	___bmul@multiplier,w
  3794     0198  1D03               	btfss	3,2
  3795     0199  299B               	goto	u391
  3796     019A  299C               	goto	u390
  3797     019B                     u391:
  3798     019B  298B               	goto	l1164
  3799     019C                     u390:
  3800     019C                     l1174:
  3801     019C  0879               	movf	___bmul@product,w
  3802     019D                     l304:
  3803     019D  0008               	return
  3804     019E                     __end_of___bmul:
  3805                           
  3806                           	psect	text24
  3807     0371                     __ptext24:	
  3808 ;; *************** function ___awdiv *****************
  3809 ;; Defined at:
  3810 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
  3811 ;; Parameters:    Size  Location     Type
  3812 ;;  divisor         2    0[COMMON] int 
  3813 ;;  dividend        2    2[COMMON] int 
  3814 ;; Auto vars:     Size  Location     Type
  3815 ;;  quotient        2    6[COMMON] int 
  3816 ;;  sign            1    5[COMMON] unsigned char 
  3817 ;;  counter         1    4[COMMON] unsigned char 
  3818 ;; Return value:  Size  Location     Type
  3819 ;;                  2    0[COMMON] int 
  3820 ;; Registers used:
  3821 ;;		wreg, status,2, status,0, btemp+1
  3822 ;; Tracked objects:
  3823 ;;		On entry : 0/0
  3824 ;;		On exit  : 0/0
  3825 ;;		Unchanged: 0/0
  3826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3827 ;;      Params:         4       0       0       0       0
  3828 ;;      Locals:         4       0       0       0       0
  3829 ;;      Temps:          0       0       0       0       0
  3830 ;;      Totals:         8       0       0       0       0
  3831 ;;Total ram usage:        8 bytes
  3832 ;; Hardware stack levels used: 1
  3833 ;; This function calls:
  3834 ;;		Nothing
  3835 ;; This function is called by:
  3836 ;;		_BCD_to_DEC
  3837 ;;		_DEC_to_BCD
  3838 ;;		_Get_RTC
  3839 ;; This function uses a non-reentrant model
  3840 ;;
  3841                           
  3842     0371                     ___awdiv:	
  3843                           ;psect for function ___awdiv
  3844                           
  3845     0371                     l1178:	
  3846                           ;incstack = 0
  3847                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  3848                           
  3849     0371  01F5               	clrf	___awdiv@sign
  3850     0372                     l1180:
  3851     0372  1FF1               	btfss	___awdiv@divisor+1,7
  3852     0373  2B75               	goto	u401
  3853     0374  2B76               	goto	u400
  3854     0375                     u401:
  3855     0375  2B7D               	goto	l1186
  3856     0376                     u400:
  3857     0376                     l1182:
  3858     0376  09F0               	comf	___awdiv@divisor,f
  3859     0377  09F1               	comf	___awdiv@divisor+1,f
  3860     0378  0AF0               	incf	___awdiv@divisor,f
  3861     0379  1903               	skipnz
  3862     037A  0AF1               	incf	___awdiv@divisor+1,f
  3863     037B                     l1184:
  3864     037B  01F5               	clrf	___awdiv@sign
  3865     037C  0AF5               	incf	___awdiv@sign,f
  3866     037D                     l1186:
  3867     037D  1FF3               	btfss	___awdiv@dividend+1,7
  3868     037E  2B80               	goto	u411
  3869     037F  2B81               	goto	u410
  3870     0380                     u411:
  3871     0380  2B8A               	goto	l1192
  3872     0381                     u410:
  3873     0381                     l1188:
  3874     0381  09F2               	comf	___awdiv@dividend,f
  3875     0382  09F3               	comf	___awdiv@dividend+1,f
  3876     0383  0AF2               	incf	___awdiv@dividend,f
  3877     0384  1903               	skipnz
  3878     0385  0AF3               	incf	___awdiv@dividend+1,f
  3879     0386                     l1190:
  3880     0386  3001               	movlw	1
  3881     0387  00FF               	movwf	btemp+1
  3882     0388  087F               	movf	btemp+1,w
  3883     0389  06F5               	xorwf	___awdiv@sign,f
  3884     038A                     l1192:
  3885     038A  01F6               	clrf	___awdiv@quotient
  3886     038B  01F7               	clrf	___awdiv@quotient+1
  3887     038C                     l1194:
  3888     038C  0870               	movf	___awdiv@divisor,w
  3889     038D  0471               	iorwf	___awdiv@divisor+1,w
  3890     038E  1903               	btfsc	3,2
  3891     038F  2B91               	goto	u421
  3892     0390  2B92               	goto	u420
  3893     0391                     u421:
  3894     0391  2BC9               	goto	l1214
  3895     0392                     u420:
  3896     0392                     l1196:
  3897     0392  01F4               	clrf	___awdiv@counter
  3898     0393  0AF4               	incf	___awdiv@counter,f
  3899     0394  2BA0               	goto	l1202
  3900     0395                     l1198:
  3901     0395  3001               	movlw	1
  3902     0396                     u435:
  3903     0396  1003               	clrc
  3904     0397  0DF0               	rlf	___awdiv@divisor,f
  3905     0398  0DF1               	rlf	___awdiv@divisor+1,f
  3906     0399  3EFF               	addlw	-1
  3907     039A  1D03               	skipz
  3908     039B  2B96               	goto	u435
  3909     039C                     l1200:
  3910     039C  3001               	movlw	1
  3911     039D  00FF               	movwf	btemp+1
  3912     039E  087F               	movf	btemp+1,w
  3913     039F  07F4               	addwf	___awdiv@counter,f
  3914     03A0                     l1202:
  3915     03A0  1FF1               	btfss	___awdiv@divisor+1,7
  3916     03A1  2BA3               	goto	u441
  3917     03A2  2BA4               	goto	u440
  3918     03A3                     u441:
  3919     03A3  2B95               	goto	l1198
  3920     03A4                     u440:
  3921     03A4                     l1204:
  3922     03A4  3001               	movlw	1
  3923     03A5                     u455:
  3924     03A5  1003               	clrc
  3925     03A6  0DF6               	rlf	___awdiv@quotient,f
  3926     03A7  0DF7               	rlf	___awdiv@quotient+1,f
  3927     03A8  3EFF               	addlw	-1
  3928     03A9  1D03               	skipz
  3929     03AA  2BA5               	goto	u455
  3930     03AB  0871               	movf	___awdiv@divisor+1,w
  3931     03AC  0273               	subwf	___awdiv@dividend+1,w
  3932     03AD  1D03               	skipz
  3933     03AE  2BB1               	goto	u465
  3934     03AF  0870               	movf	___awdiv@divisor,w
  3935     03B0  0272               	subwf	___awdiv@dividend,w
  3936     03B1                     u465:
  3937     03B1  1C03               	skipc
  3938     03B2  2BB4               	goto	u461
  3939     03B3  2BB5               	goto	u460
  3940     03B4                     u461:
  3941     03B4  2BBC               	goto	l1210
  3942     03B5                     u460:
  3943     03B5                     l1206:
  3944     03B5  0870               	movf	___awdiv@divisor,w
  3945     03B6  02F2               	subwf	___awdiv@dividend,f
  3946     03B7  0871               	movf	___awdiv@divisor+1,w
  3947     03B8  1C03               	skipc
  3948     03B9  03F3               	decf	___awdiv@dividend+1,f
  3949     03BA  02F3               	subwf	___awdiv@dividend+1,f
  3950     03BB                     l1208:
  3951     03BB  1476               	bsf	___awdiv@quotient,0
  3952     03BC                     l1210:
  3953     03BC  3001               	movlw	1
  3954     03BD                     u475:
  3955     03BD  1003               	clrc
  3956     03BE  0CF1               	rrf	___awdiv@divisor+1,f
  3957     03BF  0CF0               	rrf	___awdiv@divisor,f
  3958     03C0  3EFF               	addlw	-1
  3959     03C1  1D03               	skipz
  3960     03C2  2BBD               	goto	u475
  3961     03C3                     l1212:
  3962     03C3  3001               	movlw	1
  3963     03C4  02F4               	subwf	___awdiv@counter,f
  3964     03C5  1D03               	btfss	3,2
  3965     03C6  2BC8               	goto	u481
  3966     03C7  2BC9               	goto	u480
  3967     03C8                     u481:
  3968     03C8  2BA4               	goto	l1204
  3969     03C9                     u480:
  3970     03C9                     l1214:
  3971     03C9  0875               	movf	___awdiv@sign,w
  3972     03CA  1903               	btfsc	3,2
  3973     03CB  2BCD               	goto	u491
  3974     03CC  2BCE               	goto	u490
  3975     03CD                     u491:
  3976     03CD  2BD3               	goto	l1218
  3977     03CE                     u490:
  3978     03CE                     l1216:
  3979     03CE  09F6               	comf	___awdiv@quotient,f
  3980     03CF  09F7               	comf	___awdiv@quotient+1,f
  3981     03D0  0AF6               	incf	___awdiv@quotient,f
  3982     03D1  1903               	skipnz
  3983     03D2  0AF7               	incf	___awdiv@quotient+1,f
  3984     03D3                     l1218:
  3985     03D3  0877               	movf	___awdiv@quotient+1,w
  3986     03D4  00F1               	movwf	?___awdiv+1
  3987     03D5  0876               	movf	___awdiv@quotient,w
  3988     03D6  00F0               	movwf	?___awdiv
  3989     03D7                     l431:
  3990     03D7  0008               	return
  3991     03D8                     __end_of___awdiv:
  3992     007E                     btemp	set	126	;btemp
  3993     007E                     wtemp0	set	126
  3994                           
  3995                           	psect	idloc
  3996                           
  3997                           ;Config register IDLOC0 @ 0x2000
  3998                           ;	unspecified, using default values
  3999     2000                     	org	8192
  4000     2000  3FFF               	dw	16383
  4001                           
  4002                           ;Config register IDLOC1 @ 0x2001
  4003                           ;	unspecified, using default values
  4004     2001                     	org	8193
  4005     2001  3FFF               	dw	16383
  4006                           
  4007                           ;Config register IDLOC2 @ 0x2002
  4008                           ;	unspecified, using default values
  4009     2002                     	org	8194
  4010     2002  3FFF               	dw	16383
  4011                           
  4012                           ;Config register IDLOC3 @ 0x2003
  4013                           ;	unspecified, using default values
  4014     2003                     	org	8195
  4015     2003  3FFF               	dw	16383
  4016                           
  4017                           	psect	config
  4018                           
  4019                           ;Config register CONFIG @ 0x2007
  4020                           ;	Oscillator Selection bits
  4021                           ;	FOSC = HS, HS oscillator
  4022                           ;	Watchdog Timer Enable bit
  4023                           ;	WDTE = OFF, WDT disabled
  4024                           ;	Power-up Timer Enable bit
  4025                           ;	PWRTE = OFF, PWRT disabled
  4026                           ;	Brown-out Reset Enable bit
  4027                           ;	BOREN = OFF, BOR disabled
  4028                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  4029                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  4030                           ;	Data EEPROM Memory Code Protection bit
  4031                           ;	CPD = OFF, Data EEPROM code protection off
  4032                           ;	Flash Program Memory Write Enable bits
  4033                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  4034                           ;	In-Circuit Debugger Mode bit
  4035                           ;	DEBUG = 0x1, unprogrammed default
  4036                           ;	Flash Program Memory Code Protection bit
  4037                           ;	CP = OFF, Code protection off
  4038     2007                     	org	8199
  4039     2007  3F3A               	dw	16186

Data Sizes:
    Strings     295
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     22      23
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    RTC_Get_Time@day	PTR unsigned char  size(1) Largest target is 1
		 -> Get_RTC@RC_Day(BANK0[1]), 

    RTC_Get_Time@dayweek	PTR unsigned char  size(1) Largest target is 1
		 -> Get_RTC@RC_Dayweek(BANK0[1]), 

    RTC_Get_Time@hour	PTR unsigned char  size(1) Largest target is 1
		 -> Get_RTC@RC_Hour(BANK0[1]), 

    RTC_Get_Time@minute	PTR unsigned char  size(1) Largest target is 1
		 -> Get_RTC@RC_Minuts(BANK0[1]), 

    RTC_Get_Time@month	PTR unsigned char  size(1) Largest target is 1
		 -> Get_RTC@RC_Month(BANK0[1]), 

    RTC_Get_Time@second	PTR unsigned char  size(1) Largest target is 1
		 -> Get_RTC@RC_Seconds(BANK0[1]), 

    RTC_Get_Time@year	PTR unsigned char  size(1) Largest target is 1
		 -> Get_RTC@RC_Year(BANK0[1]), 

    UART_Write_Text@text	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_1(CODE[10]), STR_10(CODE[15]), STR_11(CODE[50]), STR_12(CODE[12]), 
		 -> STR_13(CODE[19]), STR_14(CODE[17]), STR_15(CODE[18]), STR_16(CODE[18]), 
		 -> STR_17(CODE[17]), STR_18(CODE[12]), STR_19(CODE[16]), STR_2(CODE[16]), 
		 -> STR_20(CODE[20]), STR_21(CODE[21]), STR_22(CODE[20]), STR_3(CODE[14]), 
		 -> STR_4(CODE[15]), STR_5(CODE[15]), STR_6(CODE[14]), STR_7(CODE[9]), 
		 -> STR_8(CODE[15]), STR_9(CODE[15]), 

    UART_Write_Text_ln@text	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_10(CODE[15]), STR_11(CODE[50]), STR_12(CODE[12]), STR_13(CODE[19]), 
		 -> STR_14(CODE[17]), STR_15(CODE[18]), STR_16(CODE[18]), STR_17(CODE[17]), 
		 -> STR_18(CODE[12]), STR_19(CODE[16]), STR_20(CODE[20]), STR_21(CODE[21]), 
		 -> STR_22(CODE[20]), STR_8(CODE[15]), STR_9(CODE[15]), 


Critical Paths under _main in COMMON

    _Write_RTC->_DEC_to_BCD
    _UART_Write_Text_ln->_UART_Write_Text
    _RTC_Set_Time->_I2C_Write
    _DEC_to_BCD->___awdiv
    _RTC_Init->_I2C_Write
    _Get_RTC->_BCD_to_DEC
    _UART_Write_Text->_UART_Write
    _RTC_Get_Time->_I2C_Read
    _I2C_Read->_I2C_Send_ACK
    _BCD_to_DEC->___bmul
    ___bmul->___awdiv

Critical Paths under _main in BANK0

    _main->_Write_RTC
    _Get_RTC->_BCD_to_DEC

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   11306
                                             19 BANK0      3     3      0
                            _Get_RTC
                           _I2C_Init
                           _RTC_Init
                          _UART_Init
                          _UART_Read
                          _Write_RTC
 ---------------------------------------------------------------------------------
 (1) _Write_RTC                                           19    19      0    5627
                                              0 BANK0     19    19      0
                       _ASCII_to_DEC
                         _DEC_to_BCD
                       _RTC_Set_Time
                          _UART_Read
                 _UART_Write_Text_ln
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _UART_Write_Text_ln                                   2     0      2    1904
                                              8 COMMON     2     0      2
                         _UART_Write
                    _UART_Write_Text
 ---------------------------------------------------------------------------------
 (2) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RTC_Set_Time                                         7     1      6     632
                                              1 COMMON     7     1      6
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _DEC_to_BCD                                           6     6      0    2008
                                              8 COMMON     6     6      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     448
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _ASCII_to_DEC                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTC_Init                                             3     3      0      22
                                              1 COMMON     3     3      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Get_RTC                                              9     9      0    5657
                                              1 BANK0      9     9      0
                         _BCD_to_DEC
                       _DEC_to_ASCII
                       _RTC_Get_Time
                         _UART_Write
                    _UART_Write_Text
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) _UART_Write_Text                                      7     5      2     720
                                              1 COMMON     7     5      2
                         _UART_Write
 ---------------------------------------------------------------------------------
 (4) _UART_Write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _RTC_Get_Time                                         7     1      6     732
                                              3 COMMON     7     1      6
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write                                            1     1      0      22
                                              0 COMMON     1     1      0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Read                                             2     2      0      67
                                              1 COMMON     2     2      0
                       _I2C_Send_ACK
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Send_ACK                                         1     1      0      22
                                              0 COMMON     1     1      0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Wait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DEC_to_ASCII                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _BCD_to_DEC                                           4     4      0    2184
                                             11 COMMON     3     3      0
                                              0 BANK0      1     1      0
                            ___awdiv
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     624
                                              8 COMMON     3     2      1
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1516
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Get_RTC
     _BCD_to_DEC
       ___awdiv
       ___bmul
         ___awdiv (ARG)
     _DEC_to_ASCII
     _RTC_Get_Time
       _I2C_Read
         _I2C_Send_ACK
           _I2C_Wait
         _I2C_Wait
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write
         _I2C_Wait
     _UART_Write
     _UART_Write_Text
       _UART_Write
     ___awdiv
   _I2C_Init
   _RTC_Init
     _I2C_Start
     _I2C_Stop
     _I2C_Write
   _UART_Init
   _UART_Read
   _Write_RTC
     _ASCII_to_DEC
     _DEC_to_BCD
       ___awdiv
       ___awmod
     _RTC_Set_Time
       _I2C_Start
       _I2C_Stop
       _I2C_Write
     _UART_Read
     _UART_Write_Text_ln
       _UART_Write
       _UART_Write_Text
     ___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      25       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     16      17       5       28.7%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      25      12        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Tue Sep 03 21:20:02 2024

                         pc 0002              ___bmul@product 0079                 _SSPSTATbits 0094  
                        l21 0175                          l30 012A                          l42 01CD  
                        l27 0157                          l36 0133                          l45 0166  
                        l39 013E                          l72 0140                          l90 011A  
                        l75 014A                          l84 0285                          l69 0188  
                        l93 0121                          l87 01B3                ___awdiv@sign 0075  
                        fsr 0004                         l111 0217                         l120 01ED  
                       l114 02C8                         l123 0243                         l117 0445  
                       l126 0115                         l304 019D                         l129 0119  
                       l431 03D7                         l192 060E                         l444 0370  
                       l189 07F8                         u400 0376                         u320 0153  
                       u401 0375                         u321 0152                         u410 0381  
                       u330 0157                         u411 0380                         u331 0156  
                       u420 0392                         u340 0146                         u500 031D  
                       u421 0391                         u341 0145                         u501 031C  
                       u350 0251                         u510 0328                         u511 0327  
                       u440 03A4                         u360 0273                         u520 0333  
                       u441 03A3                         u521 0332                         u370 0285  
                       u435 0396                         u371 0284                         u460 03B5  
                       u380 018F                         u540 0345                         u461 03B4  
                       u381 018E                         u541 0344                         u605 022C  
                       u390 019C                         u550 034F                         u455 03A5  
                       u391 019B                         u551 034E                         u535 0337  
                       u480 03C9                         u481 03C8                         u465 03B1  
                       u490 03CE                         u570 0362                         u491 03CD  
                       u475 03BD                         u571 0361                         u555 034B  
                       u580 0367                         u581 0366                         u565 0356  
                       u637 02DA                         u590 0120                         u591 011F  
                       u647 02ED                         u657 0210                         fsr0 0004  
                       indf 0000                ___awmod@sign 0075                        l1200 039C  
                      l1120 0153                        l1210 03BC                        l1202 03A0  
                      l1122 0159                        l1130 0146                        l1212 03C3  
                      l1204 03A4                        l1300 0113                        l1116 014B  
                      l1124 015E                        l1132 0122                        l1140 0135  
                      l1206 03B5                        l1214 03C9                        l1118 014B  
                      l1126 0165                        l1150 01C6                        l1134 0127  
                      l1142 013A                        l1310 016B                        l1230 0324  
                      l1222 0318                        l1216 03CE                        l1208 03BB  
                      l1144 01B5                        l1136 012B                        l1128 0140  
                      l1160 0269                        l1312 016F                        l1320 0182  
                      l1304 0117                        l1240 033D                        l1232 0328  
                      l1224 0319                        l1400 049F                        l1218 03D3  
                      l1170 0195                        l1162 018A                        l1146 01BA  
                      l1138 0130                        l1154 0244                        l1314 0172  
                      l1330 020A                        l1322 0183                        l1250 035C  
                      l1242 0341                        l1234 032D                        l1226 031D  
                      l1410 04D4                        l1402 04AC                        l1180 0372  
                      l1172 0197                        l1164 018B                        l1148 01C2  
                      l1156 0247                        l1340 0652                        l1332 060F  
                      l1308 0167                        l1324 0184                        l1316 0176  
                      l1244 0345                        l1236 0333                        l1252 0362  
                      l1228 0322                        l1260 019E                        l1420 0501  
                      l1412 04DD                        l1404 04B9                        l1190 0386  
                      l1182 0376                        l1174 019C                        l1166 018F  
                      l1158 0263                        l1350 06A6                        l1342 0665  
                      l1334 0618                        l1326 0187                        l1318 017E  
                      l1254 0367                        l1246 034F                        l1238 0336  
                      l1262 01A7                        l1430 055E                        l1422 0517  
                      l1414 04E6                        l1406 04C2                        l1192 038A  
                      l1184 037B                        l1168 0193                        l1280 040E  
                      l1360 06F6                        l1352 06C8                        l1344 066B  
                      l1336 062A                        l1328 01EE                        l1256 036C  
                      l1248 0355                        l1272 0287                        l1264 01AD  
                      l1440 05A7                        l1432 0567                        l1424 0524  
                      l1416 04EF                        l1408 04CB                        l1194 038C  
                      l1186 037D                        l1178 0371                        l1290 0440  
                      l1282 0418                        l1274 03D9                        l1362 0700  
                      l1354 06DB                        l1346 068D                        l1338 0630  
                      l1266 011A                        l1442 05BA                        l1434 0574  
                      l1426 0531                        l1418 04F8                        l1196 0392  
                      l1188 0381                        l1292 01D1                        l1284 0422  
                      l1276 03FA                        l1380 079E                        l1364 070A  
                      l1356 06E2                        l1372 0728                        l1348 06A0  
                      l1268 0120                        l1444 05CD                        l1436 0581  
                      l1428 0536                        l1198 0395                        l1286 042C  
                      l1278 0404                        l1382 07B1                        l1366 0714  
                      l1358 06EC                        l1374 0741                        l1446 05E0  
                      l1438 0594                        l1390 044F                        l1288 0436  
                      l1384 07EC                        l1376 0776                        l1368 071E  
                      l1296 0219                        l1448 05F3                        l1392 045C  
                      l1480 02D2                        l1386 07F2                        l1378 077C  
                      l1394 0469                        l1490 0307                        l1482 02E5  
                      l1396 046E                        l1388 0446                        l1484 02F3  
                      l1476 02C9                        l1398 0496                        l1494 030D  
                      l1486 02F8                        l1478 02CD                        l1488 0301  
                      STR_1 091D                        STR_2 0872                        STR_3 08A9  
                      STR_4 0897                        STR_5 0885                        STR_6 08BA  
                      STR_7 0908                        STR_8 08D8                        STR_9 08F6  
                      _RCIF 0065        __end_of_ASCII_to_DEC 011A                        _TRMT 04C1  
                      _main 02C9            __end_of_I2C_Init 0176            __end_of_I2C_Read 01CE  
                      btemp 007E            __end_of_I2C_Wait 0158            __end_of_I2C_Stop 0134  
                      start 0000             __end_of_Get_RTC 07F9           ___bmul@multiplier 007A  
       RTC_Get_Time@dayweek 0075     __end_of_UART_Write_Text 0286                       ?_main 0070  
           __end_of___awdiv 03D8                       STR_10 08E7                       STR_11 0800  
                     STR_12 0911                       STR_20 0847                       STR_13 086F  
                     STR_21 0832        __end_of_DEC_to_ASCII 0116                       STR_14 08A6  
                     STR_22 085B                       STR_15 0894                       STR_16 0882  
                     STR_17 08B7                       STR_18 0905                       STR_19 08C8  
           __end_of___awmod 0371                       _CMCON 009C             ___awdiv@divisor 0070  
           ___awdiv@counter 0074                       _RCREG 001A                       _SPBRG 0099  
                     _TXREG 0019                 ?_UART_Write 0070                _I2C_Send_ACK 0158  
          __end_of_RTC_Init 0218           __end_of_I2C_Start 012B           __end_of_I2C_Write 013F  
                     pclath 000A                       status 0003                       wtemp0 007E  
           __initialization 07F9            RTC_Get_Time@hour 0074            RTC_Get_Time@year 0078  
              __end_of_main 0318                      ??_main 0033            ___awdiv@dividend 0072  
                 ??_Get_RTC 0021               BCD_to_DEC@bcd 0020                      _SSPADD 0093  
                    _SSPCON 0014                      _SSPBUF 0013           __end_of_UART_Init 0189  
         __end_of_UART_Read 0122                      ___bmul 0189                ??_BCD_to_DEC 007B  
                 ??___awdiv 0074                   ??___awmod 0074            ?_UART_Write_Text 0071  
          ___awdiv@quotient 0076             ___awmod@divisor 0070             ___awmod@counter 0074  
                 ?_I2C_Init 0070                   ?_I2C_Read 0070                   ?_I2C_Wait 0070  
                 ?_I2C_Stop 0070                ??_DEC_to_BCD 0078             DEC_to_ASCII@dec 0070  
        __end_of_BCD_to_DEC 01EE     __end_of__initialization 07FC         ___bmul@multiplicand 0078  
            __pcstackCOMMON 0070           RTC_Get_Time@month 0077          __end_of_DEC_to_BCD 0244  
              _ASCII_to_DEC 0116                   ?_RTC_Init 0070                  ??_I2C_Init 0070  
                ??_I2C_Read 0071                  ??_I2C_Wait 0070                  ??_I2C_Stop 0070  
              Write_RTC@dia 002D                Write_RTC@ano 002F                Write_RTC@mes 002E  
              Write_RTC@min 0031                Write_RTC@sec 0032                  __pbssBANK0 0036  
              _DEC_to_ASCII 0112           Get_RTC@RC_Dayweek 0023               Get_RTC@RC_Day 0027  
                __pmaintext 02C9             Get_RTC@RC_Month 0028                     ?___bmul 0078  
         Get_RTC@RC_Seconds 0024                  ??_RTC_Init 0071  __end_of_UART_Write_Text_ln 01B4  
         __end_of_Write_RTC 060F                ??_UART_Write 0070                     _SSPCON2 0091  
                   _SSPSTAT 0094                  __stringtab 0003                     _Get_RTC 060F  
                 _I2C_Start 0122                   _I2C_Write 0134                     ___awdiv 0371  
                   ___awmod 0318          __end_of_UART_Write 014B                     __ptext1 0446  
                   __ptext2 019E                     __ptext3 011A                     __ptext4 0286  
                   __ptext5 0218                     __ptext6 0318                     __ptext7 0116  
                   __ptext8 0176                     __ptext9 01EE            ___awmod@dividend 0072  
                   _uart_rd 0036        end_of_initialization 07FC                  ?_I2C_Start 0070  
                ?_I2C_Write 0070                   _RCSTAbits 0018                __pstringtext 0800  
                 _UART_Init 0176                   _UART_Read 011A                   _PORTCbits 0007  
            UART_Write@data 0070                   _TRISCbits 0087               ?_RTC_Get_Time 0073  
       Write_RTC@dia_semana 002C                   _TXSTAbits 0098               ?_RTC_Set_Time 0071  
        RTC_Get_Time@minute 0073          RTC_Get_Time@second 0079              __end_of___bmul 019E  
                ?_UART_Init 0070                  ?_UART_Read 0070               DEC_to_BCD@dec 007D  
            ??_RTC_Get_Time 0079         start_initialization 07F9             RTC_Get_Time@day 0076  
       RTC_Set_Time@dayweek 0073             ASCII_to_DEC@dec 0070              ??_RTC_Set_Time 0077  
               ??_I2C_Start 0070                 ??_I2C_Write 0070                    ??___bmul 0079  
             Write_RTC@hour 0030         Write_RTC@hour_units 0021                   ___latbits 0002  
             __pcstackBANK0 0020                   _Write_RTC 0446               ?_I2C_Send_ACK 0070  
        _UART_Write_Text_ln 019E                    ?_Get_RTC 0070         ?_UART_Write_Text_ln 0078  
            Get_RTC@RC_Hour 0026              Get_RTC@RC_Year 0029            Get_RTC@RC_Minuts 0025  
                  ?___awdiv 0070                    ?___awmod 0070                 ??_UART_Init 0070  
               ??_UART_Read 0070                   __pstrings 0003        ??_UART_Write_Text_ln 007A  
                  _I2C_Init 0167                    _I2C_Read 01B4                    _I2C_Wait 014B  
                  _I2C_Stop 012B         I2C_Read@acknowledge 0071                  ?_Write_RTC 0070  
            ??_I2C_Send_ACK 0070           ??_UART_Write_Text 0073           I2C_Read@read_data 0072  
      __end_of_RTC_Get_Time 0446                    _RTC_Init 01EE                 __stringbase 0015  
        Write_RTC@dia_units 0027        __end_of_RTC_Set_Time 02C9          Write_RTC@ano_units 002B  
        RTC_Set_Time@minute 0071          RTC_Set_Time@second 0077          Write_RTC@mes_units 0029  
                _BCD_to_DEC 01CE               I2C_Write@data 0070          Write_RTC@min_units 0023  
           I2C_Send_ACK@ack 0070          Write_RTC@hour_tens 0020               ?_ASCII_to_DEC 0070  
        Write_RTC@sec_units 0025          __end_of__stringtab 0015                  _DEC_to_BCD 0218  
               ??_Write_RTC 007E                    __ptext10 0167                    __ptext11 060F  
                  __ptext20 014B                    __ptext12 0244                    __ptext21 0112  
                  __ptext13 013F                    __ptext22 01CE                    __ptext14 03D8  
                  __ptext23 0189                    __ptext15 0134                    __ptext24 0371  
                  __ptext16 012B                    __ptext17 0122                    __ptext18 01B4  
                  __ptext19 0158         UART_Write_Text@text 0071               ?_DEC_to_ASCII 0070  
      __end_of_I2C_Send_ACK 0167      UART_Write_Text_ln@text 0078              ??_ASCII_to_DEC 0070  
         Write_RTC@dia_tens 0026           Write_RTC@ano_tens 002A           RTC_Set_Time@month 0075  
         Write_RTC@mes_tens 0028           Write_RTC@min_tens 0022           Write_RTC@sec_tens 0024  
            ??_DEC_to_ASCII 0070                   stringcode 000D                 ?_BCD_to_DEC 0070  
          RTC_Set_Time@hour 0072            RTC_Set_Time@year 0076             _UART_Write_Text 0244  
               ?_DEC_to_BCD 0070                    stringtab 0003                  _UART_Write 013F  
              _RTC_Get_Time 03D8                 _SSPCON2bits 0091             RTC_Set_Time@day 0074  
          UART_Write_Text@i 0076                _RTC_Set_Time 0286  
